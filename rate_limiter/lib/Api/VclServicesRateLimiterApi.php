<?php
/**
 * VclServicesRateLimiterApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rate Limiter
 *
 * Rate limiters add configurable origin request rate limiting to a service. Use of this feature is by invite only and subject to the terms set forth in the invitation you were emailed. To create a rate limiting policy, you must have a [paid account with a contract](https://docs.fastly.com/en/guides/accounts-and-pricing-plans#paid-accounts-with-contractual-commitments) for Fastlyâ€™s services.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * VclServicesRateLimiterApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VclServicesRateLimiterApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createRateLimiter
     *
     * Create a rate limiter
     *
     * @param  string $service_id service_id (required)
     * @param  int $version_id version_id (required)
     * @param  string $name A human readable name for the rate limiting rule. (required)
     * @param  string[] $http_methods Array of HTTP methods to apply rate limiting to. (required)
     * @param  int $rps_limit Upper limit of requests per second allowed by the rate limiter. (required)
     * @param  int $window_size Number of seconds during which the RPS limit must be exceeded in order to trigger a violation. (required)
     * @param  string[] $client_key Array of VCL variables used to generate a counter key to identify a client. Examples variables include &#x60;req.http.Fastly-Client-IP&#x60;, &#x60;req.http.User-Agent&#x60;, or a custom header like &#x60;req.http.API-Key&#x60;. (required)
     * @param  int $penalty_box_duration Length of time in seconds that the rate limiter is in effect after the initial violation is detected. (required)
     * @param  string $action The action to take when a rate limiter violation is detected. \\\&quot;response\\\&quot; and \\\&quot;response_object\\\&quot; prevent an origin request; \\\&quot;log_only\\\&quot; logs the violation but allows the origin request to continue. (required)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $uri_dictionary_name The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited. (optional)
     * @param  \OpenAPI\Client\Model\ServiceServiceIdVersionVersionIdRateLimitersResponse $response response (optional)
     * @param  string $response_object_name Name of existing response object. Required if &#x60;action&#x60; is \\\&quot;response_object\\\&quot;. Note that the rate limiter response is only updated to reflect the response object content when saving the rate limiter configuration. (optional)
     * @param  string $logger_type Name of the type of logging endpoint to be used when action is \\\&quot;log_only\\\&quot;. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries. (optional)
     * @param  int $feature_revision Revision number of the rate limiting feature implementation. Defaults to the most recent revision. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject[]
     */
    public function createRateLimiter($service_id, $version_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id2 = null, $version = null, $created_at = null, $deleted_at = null, $updated_at = null, $uri_dictionary_name = null, $response = null, $response_object_name = null, $logger_type = null, $feature_revision = null)
    {
        list($response) = $this->createRateLimiterWithHttpInfo($service_id, $version_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id2, $version, $created_at, $deleted_at, $updated_at, $uri_dictionary_name, $response, $response_object_name, $logger_type, $feature_revision);
        return $response;
    }

    /**
     * Operation createRateLimiterWithHttpInfo
     *
     * Create a rate limiter
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $name A human readable name for the rate limiting rule. (required)
     * @param  string[] $http_methods Array of HTTP methods to apply rate limiting to. (required)
     * @param  int $rps_limit Upper limit of requests per second allowed by the rate limiter. (required)
     * @param  int $window_size Number of seconds during which the RPS limit must be exceeded in order to trigger a violation. (required)
     * @param  string[] $client_key Array of VCL variables used to generate a counter key to identify a client. Examples variables include &#x60;req.http.Fastly-Client-IP&#x60;, &#x60;req.http.User-Agent&#x60;, or a custom header like &#x60;req.http.API-Key&#x60;. (required)
     * @param  int $penalty_box_duration Length of time in seconds that the rate limiter is in effect after the initial violation is detected. (required)
     * @param  string $action The action to take when a rate limiter violation is detected. \\\&quot;response\\\&quot; and \\\&quot;response_object\\\&quot; prevent an origin request; \\\&quot;log_only\\\&quot; logs the violation but allows the origin request to continue. (required)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $uri_dictionary_name The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited. (optional)
     * @param  \OpenAPI\Client\Model\ServiceServiceIdVersionVersionIdRateLimitersResponse $response (optional)
     * @param  string $response_object_name Name of existing response object. Required if &#x60;action&#x60; is \\\&quot;response_object\\\&quot;. Note that the rate limiter response is only updated to reflect the response object content when saving the rate limiter configuration. (optional)
     * @param  string $logger_type Name of the type of logging endpoint to be used when action is \\\&quot;log_only\\\&quot;. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries. (optional)
     * @param  int $feature_revision Revision number of the rate limiting feature implementation. Defaults to the most recent revision. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createRateLimiterWithHttpInfo($service_id, $version_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id2 = null, $version = null, $created_at = null, $deleted_at = null, $updated_at = null, $uri_dictionary_name = null, $response = null, $response_object_name = null, $logger_type = null, $feature_revision = null)
    {
        $request = $this->createRateLimiterRequest($service_id, $version_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id2, $version, $created_at, $deleted_at, $updated_at, $uri_dictionary_name, $response, $response_object_name, $logger_type, $feature_revision);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineObject[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineObject[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineObject[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRateLimiterAsync
     *
     * Create a rate limiter
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $name A human readable name for the rate limiting rule. (required)
     * @param  string[] $http_methods Array of HTTP methods to apply rate limiting to. (required)
     * @param  int $rps_limit Upper limit of requests per second allowed by the rate limiter. (required)
     * @param  int $window_size Number of seconds during which the RPS limit must be exceeded in order to trigger a violation. (required)
     * @param  string[] $client_key Array of VCL variables used to generate a counter key to identify a client. Examples variables include &#x60;req.http.Fastly-Client-IP&#x60;, &#x60;req.http.User-Agent&#x60;, or a custom header like &#x60;req.http.API-Key&#x60;. (required)
     * @param  int $penalty_box_duration Length of time in seconds that the rate limiter is in effect after the initial violation is detected. (required)
     * @param  string $action The action to take when a rate limiter violation is detected. \\\&quot;response\\\&quot; and \\\&quot;response_object\\\&quot; prevent an origin request; \\\&quot;log_only\\\&quot; logs the violation but allows the origin request to continue. (required)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $uri_dictionary_name The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited. (optional)
     * @param  \OpenAPI\Client\Model\ServiceServiceIdVersionVersionIdRateLimitersResponse $response (optional)
     * @param  string $response_object_name Name of existing response object. Required if &#x60;action&#x60; is \\\&quot;response_object\\\&quot;. Note that the rate limiter response is only updated to reflect the response object content when saving the rate limiter configuration. (optional)
     * @param  string $logger_type Name of the type of logging endpoint to be used when action is \\\&quot;log_only\\\&quot;. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries. (optional)
     * @param  int $feature_revision Revision number of the rate limiting feature implementation. Defaults to the most recent revision. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRateLimiterAsync($service_id, $version_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id2 = null, $version = null, $created_at = null, $deleted_at = null, $updated_at = null, $uri_dictionary_name = null, $response = null, $response_object_name = null, $logger_type = null, $feature_revision = null)
    {
        return $this->createRateLimiterAsyncWithHttpInfo($service_id, $version_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id2, $version, $created_at, $deleted_at, $updated_at, $uri_dictionary_name, $response, $response_object_name, $logger_type, $feature_revision)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRateLimiterAsyncWithHttpInfo
     *
     * Create a rate limiter
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $name A human readable name for the rate limiting rule. (required)
     * @param  string[] $http_methods Array of HTTP methods to apply rate limiting to. (required)
     * @param  int $rps_limit Upper limit of requests per second allowed by the rate limiter. (required)
     * @param  int $window_size Number of seconds during which the RPS limit must be exceeded in order to trigger a violation. (required)
     * @param  string[] $client_key Array of VCL variables used to generate a counter key to identify a client. Examples variables include &#x60;req.http.Fastly-Client-IP&#x60;, &#x60;req.http.User-Agent&#x60;, or a custom header like &#x60;req.http.API-Key&#x60;. (required)
     * @param  int $penalty_box_duration Length of time in seconds that the rate limiter is in effect after the initial violation is detected. (required)
     * @param  string $action The action to take when a rate limiter violation is detected. \\\&quot;response\\\&quot; and \\\&quot;response_object\\\&quot; prevent an origin request; \\\&quot;log_only\\\&quot; logs the violation but allows the origin request to continue. (required)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $uri_dictionary_name The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited. (optional)
     * @param  \OpenAPI\Client\Model\ServiceServiceIdVersionVersionIdRateLimitersResponse $response (optional)
     * @param  string $response_object_name Name of existing response object. Required if &#x60;action&#x60; is \\\&quot;response_object\\\&quot;. Note that the rate limiter response is only updated to reflect the response object content when saving the rate limiter configuration. (optional)
     * @param  string $logger_type Name of the type of logging endpoint to be used when action is \\\&quot;log_only\\\&quot;. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries. (optional)
     * @param  int $feature_revision Revision number of the rate limiting feature implementation. Defaults to the most recent revision. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRateLimiterAsyncWithHttpInfo($service_id, $version_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id2 = null, $version = null, $created_at = null, $deleted_at = null, $updated_at = null, $uri_dictionary_name = null, $response = null, $response_object_name = null, $logger_type = null, $feature_revision = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject[]';
        $request = $this->createRateLimiterRequest($service_id, $version_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id2, $version, $created_at, $deleted_at, $updated_at, $uri_dictionary_name, $response, $response_object_name, $logger_type, $feature_revision);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRateLimiter'
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $name A human readable name for the rate limiting rule. (required)
     * @param  string[] $http_methods Array of HTTP methods to apply rate limiting to. (required)
     * @param  int $rps_limit Upper limit of requests per second allowed by the rate limiter. (required)
     * @param  int $window_size Number of seconds during which the RPS limit must be exceeded in order to trigger a violation. (required)
     * @param  string[] $client_key Array of VCL variables used to generate a counter key to identify a client. Examples variables include &#x60;req.http.Fastly-Client-IP&#x60;, &#x60;req.http.User-Agent&#x60;, or a custom header like &#x60;req.http.API-Key&#x60;. (required)
     * @param  int $penalty_box_duration Length of time in seconds that the rate limiter is in effect after the initial violation is detected. (required)
     * @param  string $action The action to take when a rate limiter violation is detected. \\\&quot;response\\\&quot; and \\\&quot;response_object\\\&quot; prevent an origin request; \\\&quot;log_only\\\&quot; logs the violation but allows the origin request to continue. (required)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $uri_dictionary_name The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited. (optional)
     * @param  \OpenAPI\Client\Model\ServiceServiceIdVersionVersionIdRateLimitersResponse $response (optional)
     * @param  string $response_object_name Name of existing response object. Required if &#x60;action&#x60; is \\\&quot;response_object\\\&quot;. Note that the rate limiter response is only updated to reflect the response object content when saving the rate limiter configuration. (optional)
     * @param  string $logger_type Name of the type of logging endpoint to be used when action is \\\&quot;log_only\\\&quot;. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries. (optional)
     * @param  int $feature_revision Revision number of the rate limiting feature implementation. Defaults to the most recent revision. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRateLimiterRequest($service_id, $version_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id2 = null, $version = null, $created_at = null, $deleted_at = null, $updated_at = null, $uri_dictionary_name = null, $response = null, $response_object_name = null, $logger_type = null, $feature_revision = null)
    {
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling createRateLimiter'
            );
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null || (is_array($version_id) && count($version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_id when calling createRateLimiter'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling createRateLimiter'
            );
        }
        if (strlen($name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling VclServicesRateLimiterApi.createRateLimiter, must be smaller than or equal to 255.');
        }
        if (strlen($name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling VclServicesRateLimiterApi.createRateLimiter, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'http_methods' is set
        if ($http_methods === null || (is_array($http_methods) && count($http_methods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $http_methods when calling createRateLimiter'
            );
        }
        // verify the required parameter 'rps_limit' is set
        if ($rps_limit === null || (is_array($rps_limit) && count($rps_limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rps_limit when calling createRateLimiter'
            );
        }
        if ($rps_limit > 10000) {
            throw new \InvalidArgumentException('invalid value for "$rps_limit" when calling VclServicesRateLimiterApi.createRateLimiter, must be smaller than or equal to 10000.');
        }
        if ($rps_limit < 10) {
            throw new \InvalidArgumentException('invalid value for "$rps_limit" when calling VclServicesRateLimiterApi.createRateLimiter, must be bigger than or equal to 10.');
        }

        // verify the required parameter 'window_size' is set
        if ($window_size === null || (is_array($window_size) && count($window_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $window_size when calling createRateLimiter'
            );
        }
        // verify the required parameter 'client_key' is set
        if ($client_key === null || (is_array($client_key) && count($client_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_key when calling createRateLimiter'
            );
        }
        // verify the required parameter 'penalty_box_duration' is set
        if ($penalty_box_duration === null || (is_array($penalty_box_duration) && count($penalty_box_duration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $penalty_box_duration when calling createRateLimiter'
            );
        }
        if ($penalty_box_duration > 60) {
            throw new \InvalidArgumentException('invalid value for "$penalty_box_duration" when calling VclServicesRateLimiterApi.createRateLimiter, must be smaller than or equal to 60.');
        }
        if ($penalty_box_duration < 1) {
            throw new \InvalidArgumentException('invalid value for "$penalty_box_duration" when calling VclServicesRateLimiterApi.createRateLimiter, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling createRateLimiter'
            );
        }
        if (strlen($action) < 1) {
            throw new \InvalidArgumentException('invalid length for "$action" when calling VclServicesRateLimiterApi.createRateLimiter, must be bigger than or equal to 1.');
        }

        if ($uri_dictionary_name !== null && strlen($uri_dictionary_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$uri_dictionary_name" when calling VclServicesRateLimiterApi.createRateLimiter, must be smaller than or equal to 255.');
        }
        if ($uri_dictionary_name !== null && strlen($uri_dictionary_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$uri_dictionary_name" when calling VclServicesRateLimiterApi.createRateLimiter, must be bigger than or equal to 1.');
        }

        if ($response_object_name !== null && strlen($response_object_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$response_object_name" when calling VclServicesRateLimiterApi.createRateLimiter, must be smaller than or equal to 255.');
        }
        if ($response_object_name !== null && strlen($response_object_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$response_object_name" when calling VclServicesRateLimiterApi.createRateLimiter, must be bigger than or equal to 1.');
        }

        if ($feature_revision !== null && strlen($feature_revision) < 1) {
            throw new \InvalidArgumentException('invalid length for "$feature_revision" when calling VclServicesRateLimiterApi.createRateLimiter, must be bigger than or equal to 1.');
        }


        $resourcePath = '/service/{service_id}/version/{version_id}/rate-limiters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'version_id' . '}',
                ObjectSerializer::toPathValue($version_id),
                $resourcePath
            );
        }

        // form params
        if ($service_id2 !== null) {
            $formParams['service_id'] = ObjectSerializer::toFormValue($service_id2);
        }
        // form params
        if ($version !== null) {
            $formParams['version'] = ObjectSerializer::toFormValue($version);
        }
        // form params
        if ($created_at !== null) {
            $formParams['created_at'] = ObjectSerializer::toFormValue($created_at);
        }
        // form params
        if ($deleted_at !== null) {
            $formParams['deleted_at'] = ObjectSerializer::toFormValue($deleted_at);
        }
        // form params
        if ($updated_at !== null) {
            $formParams['updated_at'] = ObjectSerializer::toFormValue($updated_at);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($uri_dictionary_name !== null) {
            $formParams['uri_dictionary_name'] = ObjectSerializer::toFormValue($uri_dictionary_name);
        }
        // form params
        if ($http_methods !== null) {
            $formParams['http_methods'] = ObjectSerializer::toFormValue($http_methods);
        }
        // form params
        if ($rps_limit !== null) {
            $formParams['rps_limit'] = ObjectSerializer::toFormValue($rps_limit);
        }
        // form params
        if ($window_size !== null) {
            $formParams['window_size'] = ObjectSerializer::toFormValue($window_size);
        }
        // form params
        if ($client_key !== null) {
            $formParams['client_key'] = ObjectSerializer::toFormValue($client_key);
        }
        // form params
        if ($penalty_box_duration !== null) {
            $formParams['penalty_box_duration'] = ObjectSerializer::toFormValue($penalty_box_duration);
        }
        // form params
        if ($action !== null) {
            $formParams['action'] = ObjectSerializer::toFormValue($action);
        }
        // form params
        if ($response !== null) {
            $formParams['response'] = ObjectSerializer::toFormValue($response);
        }
        // form params
        if ($response_object_name !== null) {
            $formParams['response_object_name'] = ObjectSerializer::toFormValue($response_object_name);
        }
        // form params
        if ($logger_type !== null) {
            $formParams['logger_type'] = ObjectSerializer::toFormValue($logger_type);
        }
        // form params
        if ($feature_revision !== null) {
            $formParams['feature_revision'] = ObjectSerializer::toFormValue($feature_revision);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRateLimiter
     *
     * Delete a rate limiter
     *
     * @param  string $rate_limiter_id rate_limiter_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function deleteRateLimiter($rate_limiter_id)
    {
        list($response) = $this->deleteRateLimiterWithHttpInfo($rate_limiter_id);
        return $response;
    }

    /**
     * Operation deleteRateLimiterWithHttpInfo
     *
     * Delete a rate limiter
     *
     * @param  string $rate_limiter_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRateLimiterWithHttpInfo($rate_limiter_id)
    {
        $request = $this->deleteRateLimiterRequest($rate_limiter_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRateLimiterAsync
     *
     * Delete a rate limiter
     *
     * @param  string $rate_limiter_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRateLimiterAsync($rate_limiter_id)
    {
        return $this->deleteRateLimiterAsyncWithHttpInfo($rate_limiter_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRateLimiterAsyncWithHttpInfo
     *
     * Delete a rate limiter
     *
     * @param  string $rate_limiter_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRateLimiterAsyncWithHttpInfo($rate_limiter_id)
    {
        $returnType = 'object';
        $request = $this->deleteRateLimiterRequest($rate_limiter_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRateLimiter'
     *
     * @param  string $rate_limiter_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRateLimiterRequest($rate_limiter_id)
    {
        // verify the required parameter 'rate_limiter_id' is set
        if ($rate_limiter_id === null || (is_array($rate_limiter_id) && count($rate_limiter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rate_limiter_id when calling deleteRateLimiter'
            );
        }

        $resourcePath = '/rate-limiters/{rate_limiter_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rate_limiter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rate_limiter_id' . '}',
                ObjectSerializer::toPathValue($rate_limiter_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRateLimiter
     *
     * Get a rate limiter
     *
     * @param  string $rate_limiter_id rate_limiter_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject[]
     */
    public function getRateLimiter($rate_limiter_id)
    {
        list($response) = $this->getRateLimiterWithHttpInfo($rate_limiter_id);
        return $response;
    }

    /**
     * Operation getRateLimiterWithHttpInfo
     *
     * Get a rate limiter
     *
     * @param  string $rate_limiter_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getRateLimiterWithHttpInfo($rate_limiter_id)
    {
        $request = $this->getRateLimiterRequest($rate_limiter_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineObject[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineObject[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineObject[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRateLimiterAsync
     *
     * Get a rate limiter
     *
     * @param  string $rate_limiter_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRateLimiterAsync($rate_limiter_id)
    {
        return $this->getRateLimiterAsyncWithHttpInfo($rate_limiter_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRateLimiterAsyncWithHttpInfo
     *
     * Get a rate limiter
     *
     * @param  string $rate_limiter_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRateLimiterAsyncWithHttpInfo($rate_limiter_id)
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject[]';
        $request = $this->getRateLimiterRequest($rate_limiter_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRateLimiter'
     *
     * @param  string $rate_limiter_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRateLimiterRequest($rate_limiter_id)
    {
        // verify the required parameter 'rate_limiter_id' is set
        if ($rate_limiter_id === null || (is_array($rate_limiter_id) && count($rate_limiter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rate_limiter_id when calling getRateLimiter'
            );
        }

        $resourcePath = '/rate-limiters/{rate_limiter_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rate_limiter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rate_limiter_id' . '}',
                ObjectSerializer::toPathValue($rate_limiter_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listRateLimiters
     *
     * List rate limiters
     *
     * @param  string $service_id service_id (required)
     * @param  int $version_id version_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineResponse200[]
     */
    public function listRateLimiters($service_id, $version_id)
    {
        list($response) = $this->listRateLimitersWithHttpInfo($service_id, $version_id);
        return $response;
    }

    /**
     * Operation listRateLimitersWithHttpInfo
     *
     * List rate limiters
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineResponse200[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listRateLimitersWithHttpInfo($service_id, $version_id)
    {
        $request = $this->listRateLimitersRequest($service_id, $version_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineResponse200[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineResponse200[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineResponse200[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineResponse200[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listRateLimitersAsync
     *
     * List rate limiters
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRateLimitersAsync($service_id, $version_id)
    {
        return $this->listRateLimitersAsyncWithHttpInfo($service_id, $version_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRateLimitersAsyncWithHttpInfo
     *
     * List rate limiters
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRateLimitersAsyncWithHttpInfo($service_id, $version_id)
    {
        $returnType = '\OpenAPI\Client\Model\InlineResponse200[]';
        $request = $this->listRateLimitersRequest($service_id, $version_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRateLimiters'
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listRateLimitersRequest($service_id, $version_id)
    {
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling listRateLimiters'
            );
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null || (is_array($version_id) && count($version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_id when calling listRateLimiters'
            );
        }

        $resourcePath = '/service/{service_id}/version/{version_id}/rate-limiters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'version_id' . '}',
                ObjectSerializer::toPathValue($version_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRateLimiter
     *
     * Update a rate limiter
     *
     * @param  string $rate_limiter_id rate_limiter_id (required)
     * @param  string $name A human readable name for the rate limiting rule. (required)
     * @param  string[] $http_methods Array of HTTP methods to apply rate limiting to. (required)
     * @param  int $rps_limit Upper limit of requests per second allowed by the rate limiter. (required)
     * @param  int $window_size Number of seconds during which the RPS limit must be exceeded in order to trigger a violation. (required)
     * @param  string[] $client_key Array of VCL variables used to generate a counter key to identify a client. Examples variables include &#x60;req.http.Fastly-Client-IP&#x60;, &#x60;req.http.User-Agent&#x60;, or a custom header like &#x60;req.http.API-Key&#x60;. (required)
     * @param  int $penalty_box_duration Length of time in seconds that the rate limiter is in effect after the initial violation is detected. (required)
     * @param  string $action The action to take when a rate limiter violation is detected. \\\&quot;response\\\&quot; and \\\&quot;response_object\\\&quot; prevent an origin request; \\\&quot;log_only\\\&quot; logs the violation but allows the origin request to continue. (required)
     * @param  string $service_id Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $uri_dictionary_name The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited. (optional)
     * @param  \OpenAPI\Client\Model\ServiceServiceIdVersionVersionIdRateLimitersResponse $response response (optional)
     * @param  string $response_object_name Name of existing response object. Required if &#x60;action&#x60; is \\\&quot;response_object\\\&quot;. Note that the rate limiter response is only updated to reflect the response object content when saving the rate limiter configuration. (optional)
     * @param  string $logger_type Name of the type of logging endpoint to be used when action is \\\&quot;log_only\\\&quot;. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries. (optional)
     * @param  int $feature_revision Revision number of the rate limiting feature implementation. Defaults to the most recent revision. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InlineObject1[]
     */
    public function updateRateLimiter($rate_limiter_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id = null, $version = null, $created_at = null, $deleted_at = null, $updated_at = null, $uri_dictionary_name = null, $response = null, $response_object_name = null, $logger_type = null, $feature_revision = null)
    {
        list($response) = $this->updateRateLimiterWithHttpInfo($rate_limiter_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id, $version, $created_at, $deleted_at, $updated_at, $uri_dictionary_name, $response, $response_object_name, $logger_type, $feature_revision);
        return $response;
    }

    /**
     * Operation updateRateLimiterWithHttpInfo
     *
     * Update a rate limiter
     *
     * @param  string $rate_limiter_id (required)
     * @param  string $name A human readable name for the rate limiting rule. (required)
     * @param  string[] $http_methods Array of HTTP methods to apply rate limiting to. (required)
     * @param  int $rps_limit Upper limit of requests per second allowed by the rate limiter. (required)
     * @param  int $window_size Number of seconds during which the RPS limit must be exceeded in order to trigger a violation. (required)
     * @param  string[] $client_key Array of VCL variables used to generate a counter key to identify a client. Examples variables include &#x60;req.http.Fastly-Client-IP&#x60;, &#x60;req.http.User-Agent&#x60;, or a custom header like &#x60;req.http.API-Key&#x60;. (required)
     * @param  int $penalty_box_duration Length of time in seconds that the rate limiter is in effect after the initial violation is detected. (required)
     * @param  string $action The action to take when a rate limiter violation is detected. \\\&quot;response\\\&quot; and \\\&quot;response_object\\\&quot; prevent an origin request; \\\&quot;log_only\\\&quot; logs the violation but allows the origin request to continue. (required)
     * @param  string $service_id Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $uri_dictionary_name The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited. (optional)
     * @param  \OpenAPI\Client\Model\ServiceServiceIdVersionVersionIdRateLimitersResponse $response (optional)
     * @param  string $response_object_name Name of existing response object. Required if &#x60;action&#x60; is \\\&quot;response_object\\\&quot;. Note that the rate limiter response is only updated to reflect the response object content when saving the rate limiter configuration. (optional)
     * @param  string $logger_type Name of the type of logging endpoint to be used when action is \\\&quot;log_only\\\&quot;. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries. (optional)
     * @param  int $feature_revision Revision number of the rate limiting feature implementation. Defaults to the most recent revision. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InlineObject1[], HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRateLimiterWithHttpInfo($rate_limiter_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id = null, $version = null, $created_at = null, $deleted_at = null, $updated_at = null, $uri_dictionary_name = null, $response = null, $response_object_name = null, $logger_type = null, $feature_revision = null)
    {
        $request = $this->updateRateLimiterRequest($rate_limiter_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id, $version, $created_at, $deleted_at, $updated_at, $uri_dictionary_name, $response, $response_object_name, $logger_type, $feature_revision);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InlineObject1[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InlineObject1[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InlineObject1[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InlineObject1[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRateLimiterAsync
     *
     * Update a rate limiter
     *
     * @param  string $rate_limiter_id (required)
     * @param  string $name A human readable name for the rate limiting rule. (required)
     * @param  string[] $http_methods Array of HTTP methods to apply rate limiting to. (required)
     * @param  int $rps_limit Upper limit of requests per second allowed by the rate limiter. (required)
     * @param  int $window_size Number of seconds during which the RPS limit must be exceeded in order to trigger a violation. (required)
     * @param  string[] $client_key Array of VCL variables used to generate a counter key to identify a client. Examples variables include &#x60;req.http.Fastly-Client-IP&#x60;, &#x60;req.http.User-Agent&#x60;, or a custom header like &#x60;req.http.API-Key&#x60;. (required)
     * @param  int $penalty_box_duration Length of time in seconds that the rate limiter is in effect after the initial violation is detected. (required)
     * @param  string $action The action to take when a rate limiter violation is detected. \\\&quot;response\\\&quot; and \\\&quot;response_object\\\&quot; prevent an origin request; \\\&quot;log_only\\\&quot; logs the violation but allows the origin request to continue. (required)
     * @param  string $service_id Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $uri_dictionary_name The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited. (optional)
     * @param  \OpenAPI\Client\Model\ServiceServiceIdVersionVersionIdRateLimitersResponse $response (optional)
     * @param  string $response_object_name Name of existing response object. Required if &#x60;action&#x60; is \\\&quot;response_object\\\&quot;. Note that the rate limiter response is only updated to reflect the response object content when saving the rate limiter configuration. (optional)
     * @param  string $logger_type Name of the type of logging endpoint to be used when action is \\\&quot;log_only\\\&quot;. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries. (optional)
     * @param  int $feature_revision Revision number of the rate limiting feature implementation. Defaults to the most recent revision. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRateLimiterAsync($rate_limiter_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id = null, $version = null, $created_at = null, $deleted_at = null, $updated_at = null, $uri_dictionary_name = null, $response = null, $response_object_name = null, $logger_type = null, $feature_revision = null)
    {
        return $this->updateRateLimiterAsyncWithHttpInfo($rate_limiter_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id, $version, $created_at, $deleted_at, $updated_at, $uri_dictionary_name, $response, $response_object_name, $logger_type, $feature_revision)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRateLimiterAsyncWithHttpInfo
     *
     * Update a rate limiter
     *
     * @param  string $rate_limiter_id (required)
     * @param  string $name A human readable name for the rate limiting rule. (required)
     * @param  string[] $http_methods Array of HTTP methods to apply rate limiting to. (required)
     * @param  int $rps_limit Upper limit of requests per second allowed by the rate limiter. (required)
     * @param  int $window_size Number of seconds during which the RPS limit must be exceeded in order to trigger a violation. (required)
     * @param  string[] $client_key Array of VCL variables used to generate a counter key to identify a client. Examples variables include &#x60;req.http.Fastly-Client-IP&#x60;, &#x60;req.http.User-Agent&#x60;, or a custom header like &#x60;req.http.API-Key&#x60;. (required)
     * @param  int $penalty_box_duration Length of time in seconds that the rate limiter is in effect after the initial violation is detected. (required)
     * @param  string $action The action to take when a rate limiter violation is detected. \\\&quot;response\\\&quot; and \\\&quot;response_object\\\&quot; prevent an origin request; \\\&quot;log_only\\\&quot; logs the violation but allows the origin request to continue. (required)
     * @param  string $service_id Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $uri_dictionary_name The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited. (optional)
     * @param  \OpenAPI\Client\Model\ServiceServiceIdVersionVersionIdRateLimitersResponse $response (optional)
     * @param  string $response_object_name Name of existing response object. Required if &#x60;action&#x60; is \\\&quot;response_object\\\&quot;. Note that the rate limiter response is only updated to reflect the response object content when saving the rate limiter configuration. (optional)
     * @param  string $logger_type Name of the type of logging endpoint to be used when action is \\\&quot;log_only\\\&quot;. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries. (optional)
     * @param  int $feature_revision Revision number of the rate limiting feature implementation. Defaults to the most recent revision. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRateLimiterAsyncWithHttpInfo($rate_limiter_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id = null, $version = null, $created_at = null, $deleted_at = null, $updated_at = null, $uri_dictionary_name = null, $response = null, $response_object_name = null, $logger_type = null, $feature_revision = null)
    {
        $returnType = '\OpenAPI\Client\Model\InlineObject1[]';
        $request = $this->updateRateLimiterRequest($rate_limiter_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id, $version, $created_at, $deleted_at, $updated_at, $uri_dictionary_name, $response, $response_object_name, $logger_type, $feature_revision);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRateLimiter'
     *
     * @param  string $rate_limiter_id (required)
     * @param  string $name A human readable name for the rate limiting rule. (required)
     * @param  string[] $http_methods Array of HTTP methods to apply rate limiting to. (required)
     * @param  int $rps_limit Upper limit of requests per second allowed by the rate limiter. (required)
     * @param  int $window_size Number of seconds during which the RPS limit must be exceeded in order to trigger a violation. (required)
     * @param  string[] $client_key Array of VCL variables used to generate a counter key to identify a client. Examples variables include &#x60;req.http.Fastly-Client-IP&#x60;, &#x60;req.http.User-Agent&#x60;, or a custom header like &#x60;req.http.API-Key&#x60;. (required)
     * @param  int $penalty_box_duration Length of time in seconds that the rate limiter is in effect after the initial violation is detected. (required)
     * @param  string $action The action to take when a rate limiter violation is detected. \\\&quot;response\\\&quot; and \\\&quot;response_object\\\&quot; prevent an origin request; \\\&quot;log_only\\\&quot; logs the violation but allows the origin request to continue. (required)
     * @param  string $service_id Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $uri_dictionary_name The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited. (optional)
     * @param  \OpenAPI\Client\Model\ServiceServiceIdVersionVersionIdRateLimitersResponse $response (optional)
     * @param  string $response_object_name Name of existing response object. Required if &#x60;action&#x60; is \\\&quot;response_object\\\&quot;. Note that the rate limiter response is only updated to reflect the response object content when saving the rate limiter configuration. (optional)
     * @param  string $logger_type Name of the type of logging endpoint to be used when action is \\\&quot;log_only\\\&quot;. The logging endpoint type is used to determine the appropriate log format to use when emitting log entries. (optional)
     * @param  int $feature_revision Revision number of the rate limiting feature implementation. Defaults to the most recent revision. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRateLimiterRequest($rate_limiter_id, $name, $http_methods, $rps_limit, $window_size, $client_key, $penalty_box_duration, $action, $service_id = null, $version = null, $created_at = null, $deleted_at = null, $updated_at = null, $uri_dictionary_name = null, $response = null, $response_object_name = null, $logger_type = null, $feature_revision = null)
    {
        // verify the required parameter 'rate_limiter_id' is set
        if ($rate_limiter_id === null || (is_array($rate_limiter_id) && count($rate_limiter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rate_limiter_id when calling updateRateLimiter'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling updateRateLimiter'
            );
        }
        if (strlen($name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling VclServicesRateLimiterApi.updateRateLimiter, must be smaller than or equal to 255.');
        }
        if (strlen($name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$name" when calling VclServicesRateLimiterApi.updateRateLimiter, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'http_methods' is set
        if ($http_methods === null || (is_array($http_methods) && count($http_methods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $http_methods when calling updateRateLimiter'
            );
        }
        // verify the required parameter 'rps_limit' is set
        if ($rps_limit === null || (is_array($rps_limit) && count($rps_limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rps_limit when calling updateRateLimiter'
            );
        }
        if ($rps_limit > 10000) {
            throw new \InvalidArgumentException('invalid value for "$rps_limit" when calling VclServicesRateLimiterApi.updateRateLimiter, must be smaller than or equal to 10000.');
        }
        if ($rps_limit < 10) {
            throw new \InvalidArgumentException('invalid value for "$rps_limit" when calling VclServicesRateLimiterApi.updateRateLimiter, must be bigger than or equal to 10.');
        }

        // verify the required parameter 'window_size' is set
        if ($window_size === null || (is_array($window_size) && count($window_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $window_size when calling updateRateLimiter'
            );
        }
        // verify the required parameter 'client_key' is set
        if ($client_key === null || (is_array($client_key) && count($client_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_key when calling updateRateLimiter'
            );
        }
        // verify the required parameter 'penalty_box_duration' is set
        if ($penalty_box_duration === null || (is_array($penalty_box_duration) && count($penalty_box_duration) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $penalty_box_duration when calling updateRateLimiter'
            );
        }
        if ($penalty_box_duration > 60) {
            throw new \InvalidArgumentException('invalid value for "$penalty_box_duration" when calling VclServicesRateLimiterApi.updateRateLimiter, must be smaller than or equal to 60.');
        }
        if ($penalty_box_duration < 1) {
            throw new \InvalidArgumentException('invalid value for "$penalty_box_duration" when calling VclServicesRateLimiterApi.updateRateLimiter, must be bigger than or equal to 1.');
        }

        // verify the required parameter 'action' is set
        if ($action === null || (is_array($action) && count($action) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $action when calling updateRateLimiter'
            );
        }
        if (strlen($action) < 1) {
            throw new \InvalidArgumentException('invalid length for "$action" when calling VclServicesRateLimiterApi.updateRateLimiter, must be bigger than or equal to 1.');
        }

        if ($uri_dictionary_name !== null && strlen($uri_dictionary_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$uri_dictionary_name" when calling VclServicesRateLimiterApi.updateRateLimiter, must be smaller than or equal to 255.');
        }
        if ($uri_dictionary_name !== null && strlen($uri_dictionary_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$uri_dictionary_name" when calling VclServicesRateLimiterApi.updateRateLimiter, must be bigger than or equal to 1.');
        }

        if ($response_object_name !== null && strlen($response_object_name) > 255) {
            throw new \InvalidArgumentException('invalid length for "$response_object_name" when calling VclServicesRateLimiterApi.updateRateLimiter, must be smaller than or equal to 255.');
        }
        if ($response_object_name !== null && strlen($response_object_name) < 1) {
            throw new \InvalidArgumentException('invalid length for "$response_object_name" when calling VclServicesRateLimiterApi.updateRateLimiter, must be bigger than or equal to 1.');
        }

        if ($feature_revision !== null && strlen($feature_revision) < 1) {
            throw new \InvalidArgumentException('invalid length for "$feature_revision" when calling VclServicesRateLimiterApi.updateRateLimiter, must be bigger than or equal to 1.');
        }


        $resourcePath = '/rate-limiters/{rate_limiter_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($rate_limiter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rate_limiter_id' . '}',
                ObjectSerializer::toPathValue($rate_limiter_id),
                $resourcePath
            );
        }

        // form params
        if ($service_id !== null) {
            $formParams['service_id'] = ObjectSerializer::toFormValue($service_id);
        }
        // form params
        if ($version !== null) {
            $formParams['version'] = ObjectSerializer::toFormValue($version);
        }
        // form params
        if ($created_at !== null) {
            $formParams['created_at'] = ObjectSerializer::toFormValue($created_at);
        }
        // form params
        if ($deleted_at !== null) {
            $formParams['deleted_at'] = ObjectSerializer::toFormValue($deleted_at);
        }
        // form params
        if ($updated_at !== null) {
            $formParams['updated_at'] = ObjectSerializer::toFormValue($updated_at);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($uri_dictionary_name !== null) {
            $formParams['uri_dictionary_name'] = ObjectSerializer::toFormValue($uri_dictionary_name);
        }
        // form params
        if ($http_methods !== null) {
            $formParams['http_methods'] = ObjectSerializer::toFormValue($http_methods);
        }
        // form params
        if ($rps_limit !== null) {
            $formParams['rps_limit'] = ObjectSerializer::toFormValue($rps_limit);
        }
        // form params
        if ($window_size !== null) {
            $formParams['window_size'] = ObjectSerializer::toFormValue($window_size);
        }
        // form params
        if ($client_key !== null) {
            $formParams['client_key'] = ObjectSerializer::toFormValue($client_key);
        }
        // form params
        if ($penalty_box_duration !== null) {
            $formParams['penalty_box_duration'] = ObjectSerializer::toFormValue($penalty_box_duration);
        }
        // form params
        if ($action !== null) {
            $formParams['action'] = ObjectSerializer::toFormValue($action);
        }
        // form params
        if ($response !== null) {
            $formParams['response'] = ObjectSerializer::toFormValue($response);
        }
        // form params
        if ($response_object_name !== null) {
            $formParams['response_object_name'] = ObjectSerializer::toFormValue($response_object_name);
        }
        // form params
        if ($logger_type !== null) {
            $formParams['logger_type'] = ObjectSerializer::toFormValue($logger_type);
        }
        // form params
        if ($feature_revision !== null) {
            $formParams['feature_revision'] = ObjectSerializer::toFormValue($feature_revision);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
