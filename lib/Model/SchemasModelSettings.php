<?php
/**
 * SchemasModelSettings
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fastly API
 *
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit developer.fastly.com/reference/api/
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SchemasModelSettings Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class SchemasModelSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'schemas-model_settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'service_id' => 'string',
        'version' => 'int',
        'general_default_host' => 'string',
        'general_default_ttl' => 'int',
        'general_stale_if_error' => 'bool',
        'general_stale_if_error_ttl' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'service_id' => null,
        'version' => null,
        'general_default_host' => null,
        'general_default_ttl' => null,
        'general_stale_if_error' => null,
        'general_stale_if_error_ttl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'service_id' => 'service_id',
        'version' => 'version',
        'general_default_host' => 'general.default_host',
        'general_default_ttl' => 'general.default_ttl',
        'general_stale_if_error' => 'general.stale_if_error',
        'general_stale_if_error_ttl' => 'general.stale_if_error_ttl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'service_id' => 'setServiceId',
        'version' => 'setVersion',
        'general_default_host' => 'setGeneralDefaultHost',
        'general_default_ttl' => 'setGeneralDefaultTtl',
        'general_stale_if_error' => 'setGeneralStaleIfError',
        'general_stale_if_error_ttl' => 'setGeneralStaleIfErrorTtl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'service_id' => 'getServiceId',
        'version' => 'getVersion',
        'general_default_host' => 'getGeneralDefaultHost',
        'general_default_ttl' => 'getGeneralDefaultTtl',
        'general_stale_if_error' => 'getGeneralStaleIfError',
        'general_stale_if_error_ttl' => 'getGeneralStaleIfErrorTtl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['service_id'] = $data['service_id'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['general_default_host'] = $data['general_default_host'] ?? null;
        $this->container['general_default_ttl'] = $data['general_default_ttl'] ?? null;
        $this->container['general_stale_if_error'] = $data['general_stale_if_error'] ?? false;
        $this->container['general_stale_if_error_ttl'] = $data['general_stale_if_error_ttl'] ?? 43200;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets service_id
     *
     * @return string|null
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     *
     * @param string|null $service_id Alphanumeric string identifying the service.
     *
     * @return self
     */
    public function setServiceId($service_id)
    {
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int|null $version Integer identifying a service version.
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets general_default_host
     *
     * @return string|null
     */
    public function getGeneralDefaultHost()
    {
        return $this->container['general_default_host'];
    }

    /**
     * Sets general_default_host
     *
     * @param string|null $general_default_host The default host name for the version.
     *
     * @return self
     */
    public function setGeneralDefaultHost($general_default_host)
    {
        $this->container['general_default_host'] = $general_default_host;

        return $this;
    }

    /**
     * Gets general_default_ttl
     *
     * @return int|null
     */
    public function getGeneralDefaultTtl()
    {
        return $this->container['general_default_ttl'];
    }

    /**
     * Sets general_default_ttl
     *
     * @param int|null $general_default_ttl The default time-to-live (TTL) for the version.
     *
     * @return self
     */
    public function setGeneralDefaultTtl($general_default_ttl)
    {
        $this->container['general_default_ttl'] = $general_default_ttl;

        return $this;
    }

    /**
     * Gets general_stale_if_error
     *
     * @return bool|null
     */
    public function getGeneralStaleIfError()
    {
        return $this->container['general_stale_if_error'];
    }

    /**
     * Sets general_stale_if_error
     *
     * @param bool|null $general_stale_if_error Enables serving a stale object if there is an error.
     *
     * @return self
     */
    public function setGeneralStaleIfError($general_stale_if_error)
    {
        $this->container['general_stale_if_error'] = $general_stale_if_error;

        return $this;
    }

    /**
     * Gets general_stale_if_error_ttl
     *
     * @return int|null
     */
    public function getGeneralStaleIfErrorTtl()
    {
        return $this->container['general_stale_if_error_ttl'];
    }

    /**
     * Sets general_stale_if_error_ttl
     *
     * @param int|null $general_stale_if_error_ttl The default time-to-live (TTL) for serving the stale object for the version.
     *
     * @return self
     */
    public function setGeneralStaleIfErrorTtl($general_stale_if_error_ttl)
    {
        $this->container['general_stale_if_error_ttl'] = $general_stale_if_error_ttl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


