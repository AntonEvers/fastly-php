<?php
/**
 * ModelTlsBulkCertificate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fastly API
 *
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit developer.fastly.com/reference/api/
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ModelTlsBulkCertificate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ModelTlsBulkCertificate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'model_tls_bulk_certificate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allow_untrusted_root' => 'bool',
        'cert_blob' => 'string',
        'created_at' => 'string',
        'intermediates_blob' => 'string',
        'not_after' => 'string',
        'not_before' => 'string',
        'replace' => 'bool',
        'updated_at' => 'string',
        'tls_domains' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allow_untrusted_root' => null,
        'cert_blob' => null,
        'created_at' => null,
        'intermediates_blob' => null,
        'not_after' => null,
        'not_before' => null,
        'replace' => null,
        'updated_at' => null,
        'tls_domains' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allow_untrusted_root' => 'allow_untrusted_root',
        'cert_blob' => 'cert_blob',
        'created_at' => 'created_at',
        'intermediates_blob' => 'intermediates_blob',
        'not_after' => 'not_after',
        'not_before' => 'not_before',
        'replace' => 'replace',
        'updated_at' => 'updated_at',
        'tls_domains' => 'tls_domains'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allow_untrusted_root' => 'setAllowUntrustedRoot',
        'cert_blob' => 'setCertBlob',
        'created_at' => 'setCreatedAt',
        'intermediates_blob' => 'setIntermediatesBlob',
        'not_after' => 'setNotAfter',
        'not_before' => 'setNotBefore',
        'replace' => 'setReplace',
        'updated_at' => 'setUpdatedAt',
        'tls_domains' => 'setTlsDomains'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allow_untrusted_root' => 'getAllowUntrustedRoot',
        'cert_blob' => 'getCertBlob',
        'created_at' => 'getCreatedAt',
        'intermediates_blob' => 'getIntermediatesBlob',
        'not_after' => 'getNotAfter',
        'not_before' => 'getNotBefore',
        'replace' => 'getReplace',
        'updated_at' => 'getUpdatedAt',
        'tls_domains' => 'getTlsDomains'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['allow_untrusted_root'] = $data['allow_untrusted_root'] ?? false;
        $this->container['cert_blob'] = $data['cert_blob'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['intermediates_blob'] = $data['intermediates_blob'] ?? null;
        $this->container['not_after'] = $data['not_after'] ?? null;
        $this->container['not_before'] = $data['not_before'] ?? null;
        $this->container['replace'] = $data['replace'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['tls_domains'] = $data['tls_domains'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allow_untrusted_root
     *
     * @return bool|null
     */
    public function getAllowUntrustedRoot()
    {
        return $this->container['allow_untrusted_root'];
    }

    /**
     * Sets allow_untrusted_root
     *
     * @param bool|null $allow_untrusted_root Allow certificates that chain to untrusted roots.
     *
     * @return self
     */
    public function setAllowUntrustedRoot($allow_untrusted_root)
    {
        $this->container['allow_untrusted_root'] = $allow_untrusted_root;

        return $this;
    }

    /**
     * Gets cert_blob
     *
     * @return string|null
     */
    public function getCertBlob()
    {
        return $this->container['cert_blob'];
    }

    /**
     * Sets cert_blob
     *
     * @param string|null $cert_blob The PEM-formatted certificate blob. Required.
     *
     * @return self
     */
    public function setCertBlob($cert_blob)
    {
        $this->container['cert_blob'] = $cert_blob;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Time-stamp (GMT) when the certificate was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets intermediates_blob
     *
     * @return string|null
     */
    public function getIntermediatesBlob()
    {
        return $this->container['intermediates_blob'];
    }

    /**
     * Sets intermediates_blob
     *
     * @param string|null $intermediates_blob The PEM-formatted chain of intermediate blobs. Required.
     *
     * @return self
     */
    public function setIntermediatesBlob($intermediates_blob)
    {
        $this->container['intermediates_blob'] = $intermediates_blob;

        return $this;
    }

    /**
     * Gets not_after
     *
     * @return string|null
     */
    public function getNotAfter()
    {
        return $this->container['not_after'];
    }

    /**
     * Sets not_after
     *
     * @param string|null $not_after Time-stamp (GMT) when the certificate will expire. Must be in the future to be used to terminate TLS traffic.
     *
     * @return self
     */
    public function setNotAfter($not_after)
    {
        $this->container['not_after'] = $not_after;

        return $this;
    }

    /**
     * Gets not_before
     *
     * @return string|null
     */
    public function getNotBefore()
    {
        return $this->container['not_before'];
    }

    /**
     * Sets not_before
     *
     * @param string|null $not_before Time-stamp (GMT) when the certificate will become valid. Must be in the past to be used to terminate TLS traffic.
     *
     * @return self
     */
    public function setNotBefore($not_before)
    {
        $this->container['not_before'] = $not_before;

        return $this;
    }

    /**
     * Gets replace
     *
     * @return bool|null
     */
    public function getReplace()
    {
        return $this->container['replace'];
    }

    /**
     * Sets replace
     *
     * @param bool|null $replace A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     *
     * @return self
     */
    public function setReplace($replace)
    {
        $this->container['replace'] = $replace;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Time-stamp (GMT) when the certificate was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets tls_domains
     *
     * @return object[]|null
     */
    public function getTlsDomains()
    {
        return $this->container['tls_domains'];
    }

    /**
     * Sets tls_domains
     *
     * @param object[]|null $tls_domains All the domains (including wildcard domains) that are listed in any certificate's Subject Alternative Names (SAN) list.
     *
     * @return self
     */
    public function setTlsDomains($tls_domains)
    {
        $this->container['tls_domains'] = $tls_domains;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


