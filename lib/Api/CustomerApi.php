<?php
/**
 * CustomerApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fastly API
 *
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit developer.fastly.com/reference/api/
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteCustomer
     *
     * Delete a customer
     *
     * @param  string $customer_id customer_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function deleteCustomer($customer_id)
    {
        list($response) = $this->deleteCustomerWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation deleteCustomerWithHttpInfo
     *
     * Delete a customer
     *
     * @param  string $customer_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomerWithHttpInfo($customer_id)
    {
        $request = $this->deleteCustomerRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomerAsync
     *
     * Delete a customer
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerAsync($customer_id)
    {
        return $this->deleteCustomerAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomerAsyncWithHttpInfo
     *
     * Delete a customer
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomerAsyncWithHttpInfo($customer_id)
    {
        $returnType = 'object';
        $request = $this->deleteCustomerRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomer'
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCustomerRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling deleteCustomer'
            );
        }

        $resourcePath = '/customer/{customer_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomer
     *
     * Get a customer
     *
     * @param  string $customer_id customer_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelCustomer
     */
    public function getCustomer($customer_id)
    {
        list($response) = $this->getCustomerWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation getCustomerWithHttpInfo
     *
     * Get a customer
     *
     * @param  string $customer_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelCustomer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerWithHttpInfo($customer_id)
    {
        $request = $this->getCustomerRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelCustomer' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelCustomer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModelCustomer';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelCustomer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerAsync
     *
     * Get a customer
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerAsync($customer_id)
    {
        return $this->getCustomerAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerAsyncWithHttpInfo
     *
     * Get a customer
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerAsyncWithHttpInfo($customer_id)
    {
        $returnType = '\OpenAPI\Client\Model\ModelCustomer';
        $request = $this->getCustomerRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomer'
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling getCustomer'
            );
        }

        $resourcePath = '/customer/{customer_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLoggedInCustomer
     *
     * Get the logged in customer
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelCustomer
     */
    public function getLoggedInCustomer()
    {
        list($response) = $this->getLoggedInCustomerWithHttpInfo();
        return $response;
    }

    /**
     * Operation getLoggedInCustomerWithHttpInfo
     *
     * Get the logged in customer
     *
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelCustomer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoggedInCustomerWithHttpInfo()
    {
        $request = $this->getLoggedInCustomerRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelCustomer' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelCustomer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModelCustomer';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelCustomer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLoggedInCustomerAsync
     *
     * Get the logged in customer
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoggedInCustomerAsync()
    {
        return $this->getLoggedInCustomerAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLoggedInCustomerAsyncWithHttpInfo
     *
     * Get the logged in customer
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoggedInCustomerAsyncWithHttpInfo()
    {
        $returnType = '\OpenAPI\Client\Model\ModelCustomer';
        $request = $this->getLoggedInCustomerRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLoggedInCustomer'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLoggedInCustomerRequest()
    {

        $resourcePath = '/current_customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listUsers
     *
     * List users
     *
     * @param  string $customer_id customer_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SchemasModelUser[]
     */
    public function listUsers($customer_id)
    {
        list($response) = $this->listUsersWithHttpInfo($customer_id);
        return $response;
    }

    /**
     * Operation listUsersWithHttpInfo
     *
     * List users
     *
     * @param  string $customer_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SchemasModelUser[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listUsersWithHttpInfo($customer_id)
    {
        $request = $this->listUsersRequest($customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SchemasModelUser[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SchemasModelUser[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SchemasModelUser[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SchemasModelUser[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listUsersAsync
     *
     * List users
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listUsersAsync($customer_id)
    {
        return $this->listUsersAsyncWithHttpInfo($customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listUsersAsyncWithHttpInfo
     *
     * List users
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listUsersAsyncWithHttpInfo($customer_id)
    {
        $returnType = '\OpenAPI\Client\Model\SchemasModelUser[]';
        $request = $this->listUsersRequest($customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listUsers'
     *
     * @param  string $customer_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listUsersRequest($customer_id)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling listUsers'
            );
        }

        $resourcePath = '/customer/{customer_id}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomer
     *
     * Update a customer
     *
     * @param  string $customer_id customer_id (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $billing_contact_id The alphanumeric string representing the primary billing contact. (optional)
     * @param  string $billing_network_type Customer&#39;s current network revenue type. Can be &#x60;public&#x60; or &#x60;private&#x60;. (optional)
     * @param  string $billing_ref Used for adding purchased orders to customer&#39;s account. (optional)
     * @param  bool $can_configure_wordpress Whether this customer can view or edit wordpress. (optional)
     * @param  bool $can_reset_passwords Whether this customer can reset passwords. (optional)
     * @param  bool $can_upload_vcl Whether this customer can upload VCL. (optional)
     * @param  bool $force_2fa Specifies whether 2FA is forced or not forced on the customer account. Logs out non-2FA users once 2FA is force enabled. (optional)
     * @param  bool $force_sso Specifies whether SSO is forced or not forced on the customer account. (optional)
     * @param  bool $has_account_panel Specifies whether the account has access or does not have access to the account panel. (optional)
     * @param  bool $has_improved_events Specifies whether the account has access or does not have access to the improved events. (optional)
     * @param  bool $has_improved_ssl_config Whether this customer can view or edit the SSL config. (optional)
     * @param  bool $has_openstack_logging Specifies whether the account has enabled or not enabled openstack logging. (optional)
     * @param  bool $has_pci Specifies whether the account can edit PCI for a service. (optional)
     * @param  bool $has_pci_passwords Specifies whether PCI passwords are required for the account. (optional)
     * @param  string $id Alphanumeric string identifying the customer. (optional)
     * @param  string $ip_whitelist The range of IP addresses authorized to access the customer account. (optional)
     * @param  string $legal_contact_id The alphanumeric string identifying the account&#39;s legal contact. (optional)
     * @param  string $name The name of the customer, generally the company name. (optional)
     * @param  string $owner_id The alphanumeric string identifying the account owner. (optional)
     * @param  string $phone_number The phone number associated with the account. (optional)
     * @param  string $postal_address The postal address associated with the account. (optional)
     * @param  string $pricing_plan The pricing plan this customer is under. (optional)
     * @param  string $pricing_plan_id The alphanumeric string identifying the pricing plan. (optional)
     * @param  string $security_contact_id The alphanumeric string identifying the account&#39;s security contact. (optional)
     * @param  string $technical_contact_id The alphanumeric string identifying the account&#39;s technical contact. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelCustomer
     */
    public function updateCustomer($customer_id, $created_at = null, $deleted_at = null, $updated_at = null, $billing_contact_id = null, $billing_network_type = null, $billing_ref = null, $can_configure_wordpress = null, $can_reset_passwords = null, $can_upload_vcl = null, $force_2fa = null, $force_sso = null, $has_account_panel = null, $has_improved_events = null, $has_improved_ssl_config = null, $has_openstack_logging = null, $has_pci = null, $has_pci_passwords = null, $id = null, $ip_whitelist = null, $legal_contact_id = null, $name = null, $owner_id = null, $phone_number = null, $postal_address = null, $pricing_plan = null, $pricing_plan_id = null, $security_contact_id = null, $technical_contact_id = null)
    {
        list($response) = $this->updateCustomerWithHttpInfo($customer_id, $created_at, $deleted_at, $updated_at, $billing_contact_id, $billing_network_type, $billing_ref, $can_configure_wordpress, $can_reset_passwords, $can_upload_vcl, $force_2fa, $force_sso, $has_account_panel, $has_improved_events, $has_improved_ssl_config, $has_openstack_logging, $has_pci, $has_pci_passwords, $id, $ip_whitelist, $legal_contact_id, $name, $owner_id, $phone_number, $postal_address, $pricing_plan, $pricing_plan_id, $security_contact_id, $technical_contact_id);
        return $response;
    }

    /**
     * Operation updateCustomerWithHttpInfo
     *
     * Update a customer
     *
     * @param  string $customer_id (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $billing_contact_id The alphanumeric string representing the primary billing contact. (optional)
     * @param  string $billing_network_type Customer&#39;s current network revenue type. Can be &#x60;public&#x60; or &#x60;private&#x60;. (optional)
     * @param  string $billing_ref Used for adding purchased orders to customer&#39;s account. (optional)
     * @param  bool $can_configure_wordpress Whether this customer can view or edit wordpress. (optional)
     * @param  bool $can_reset_passwords Whether this customer can reset passwords. (optional)
     * @param  bool $can_upload_vcl Whether this customer can upload VCL. (optional)
     * @param  bool $force_2fa Specifies whether 2FA is forced or not forced on the customer account. Logs out non-2FA users once 2FA is force enabled. (optional)
     * @param  bool $force_sso Specifies whether SSO is forced or not forced on the customer account. (optional)
     * @param  bool $has_account_panel Specifies whether the account has access or does not have access to the account panel. (optional)
     * @param  bool $has_improved_events Specifies whether the account has access or does not have access to the improved events. (optional)
     * @param  bool $has_improved_ssl_config Whether this customer can view or edit the SSL config. (optional)
     * @param  bool $has_openstack_logging Specifies whether the account has enabled or not enabled openstack logging. (optional)
     * @param  bool $has_pci Specifies whether the account can edit PCI for a service. (optional)
     * @param  bool $has_pci_passwords Specifies whether PCI passwords are required for the account. (optional)
     * @param  string $id Alphanumeric string identifying the customer. (optional)
     * @param  string $ip_whitelist The range of IP addresses authorized to access the customer account. (optional)
     * @param  string $legal_contact_id The alphanumeric string identifying the account&#39;s legal contact. (optional)
     * @param  string $name The name of the customer, generally the company name. (optional)
     * @param  string $owner_id The alphanumeric string identifying the account owner. (optional)
     * @param  string $phone_number The phone number associated with the account. (optional)
     * @param  string $postal_address The postal address associated with the account. (optional)
     * @param  string $pricing_plan The pricing plan this customer is under. (optional)
     * @param  string $pricing_plan_id The alphanumeric string identifying the pricing plan. (optional)
     * @param  string $security_contact_id The alphanumeric string identifying the account&#39;s security contact. (optional)
     * @param  string $technical_contact_id The alphanumeric string identifying the account&#39;s technical contact. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelCustomer, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerWithHttpInfo($customer_id, $created_at = null, $deleted_at = null, $updated_at = null, $billing_contact_id = null, $billing_network_type = null, $billing_ref = null, $can_configure_wordpress = null, $can_reset_passwords = null, $can_upload_vcl = null, $force_2fa = null, $force_sso = null, $has_account_panel = null, $has_improved_events = null, $has_improved_ssl_config = null, $has_openstack_logging = null, $has_pci = null, $has_pci_passwords = null, $id = null, $ip_whitelist = null, $legal_contact_id = null, $name = null, $owner_id = null, $phone_number = null, $postal_address = null, $pricing_plan = null, $pricing_plan_id = null, $security_contact_id = null, $technical_contact_id = null)
    {
        $request = $this->updateCustomerRequest($customer_id, $created_at, $deleted_at, $updated_at, $billing_contact_id, $billing_network_type, $billing_ref, $can_configure_wordpress, $can_reset_passwords, $can_upload_vcl, $force_2fa, $force_sso, $has_account_panel, $has_improved_events, $has_improved_ssl_config, $has_openstack_logging, $has_pci, $has_pci_passwords, $id, $ip_whitelist, $legal_contact_id, $name, $owner_id, $phone_number, $postal_address, $pricing_plan, $pricing_plan_id, $security_contact_id, $technical_contact_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelCustomer' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelCustomer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModelCustomer';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelCustomer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerAsync
     *
     * Update a customer
     *
     * @param  string $customer_id (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $billing_contact_id The alphanumeric string representing the primary billing contact. (optional)
     * @param  string $billing_network_type Customer&#39;s current network revenue type. Can be &#x60;public&#x60; or &#x60;private&#x60;. (optional)
     * @param  string $billing_ref Used for adding purchased orders to customer&#39;s account. (optional)
     * @param  bool $can_configure_wordpress Whether this customer can view or edit wordpress. (optional)
     * @param  bool $can_reset_passwords Whether this customer can reset passwords. (optional)
     * @param  bool $can_upload_vcl Whether this customer can upload VCL. (optional)
     * @param  bool $force_2fa Specifies whether 2FA is forced or not forced on the customer account. Logs out non-2FA users once 2FA is force enabled. (optional)
     * @param  bool $force_sso Specifies whether SSO is forced or not forced on the customer account. (optional)
     * @param  bool $has_account_panel Specifies whether the account has access or does not have access to the account panel. (optional)
     * @param  bool $has_improved_events Specifies whether the account has access or does not have access to the improved events. (optional)
     * @param  bool $has_improved_ssl_config Whether this customer can view or edit the SSL config. (optional)
     * @param  bool $has_openstack_logging Specifies whether the account has enabled or not enabled openstack logging. (optional)
     * @param  bool $has_pci Specifies whether the account can edit PCI for a service. (optional)
     * @param  bool $has_pci_passwords Specifies whether PCI passwords are required for the account. (optional)
     * @param  string $id Alphanumeric string identifying the customer. (optional)
     * @param  string $ip_whitelist The range of IP addresses authorized to access the customer account. (optional)
     * @param  string $legal_contact_id The alphanumeric string identifying the account&#39;s legal contact. (optional)
     * @param  string $name The name of the customer, generally the company name. (optional)
     * @param  string $owner_id The alphanumeric string identifying the account owner. (optional)
     * @param  string $phone_number The phone number associated with the account. (optional)
     * @param  string $postal_address The postal address associated with the account. (optional)
     * @param  string $pricing_plan The pricing plan this customer is under. (optional)
     * @param  string $pricing_plan_id The alphanumeric string identifying the pricing plan. (optional)
     * @param  string $security_contact_id The alphanumeric string identifying the account&#39;s security contact. (optional)
     * @param  string $technical_contact_id The alphanumeric string identifying the account&#39;s technical contact. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerAsync($customer_id, $created_at = null, $deleted_at = null, $updated_at = null, $billing_contact_id = null, $billing_network_type = null, $billing_ref = null, $can_configure_wordpress = null, $can_reset_passwords = null, $can_upload_vcl = null, $force_2fa = null, $force_sso = null, $has_account_panel = null, $has_improved_events = null, $has_improved_ssl_config = null, $has_openstack_logging = null, $has_pci = null, $has_pci_passwords = null, $id = null, $ip_whitelist = null, $legal_contact_id = null, $name = null, $owner_id = null, $phone_number = null, $postal_address = null, $pricing_plan = null, $pricing_plan_id = null, $security_contact_id = null, $technical_contact_id = null)
    {
        return $this->updateCustomerAsyncWithHttpInfo($customer_id, $created_at, $deleted_at, $updated_at, $billing_contact_id, $billing_network_type, $billing_ref, $can_configure_wordpress, $can_reset_passwords, $can_upload_vcl, $force_2fa, $force_sso, $has_account_panel, $has_improved_events, $has_improved_ssl_config, $has_openstack_logging, $has_pci, $has_pci_passwords, $id, $ip_whitelist, $legal_contact_id, $name, $owner_id, $phone_number, $postal_address, $pricing_plan, $pricing_plan_id, $security_contact_id, $technical_contact_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerAsyncWithHttpInfo
     *
     * Update a customer
     *
     * @param  string $customer_id (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $billing_contact_id The alphanumeric string representing the primary billing contact. (optional)
     * @param  string $billing_network_type Customer&#39;s current network revenue type. Can be &#x60;public&#x60; or &#x60;private&#x60;. (optional)
     * @param  string $billing_ref Used for adding purchased orders to customer&#39;s account. (optional)
     * @param  bool $can_configure_wordpress Whether this customer can view or edit wordpress. (optional)
     * @param  bool $can_reset_passwords Whether this customer can reset passwords. (optional)
     * @param  bool $can_upload_vcl Whether this customer can upload VCL. (optional)
     * @param  bool $force_2fa Specifies whether 2FA is forced or not forced on the customer account. Logs out non-2FA users once 2FA is force enabled. (optional)
     * @param  bool $force_sso Specifies whether SSO is forced or not forced on the customer account. (optional)
     * @param  bool $has_account_panel Specifies whether the account has access or does not have access to the account panel. (optional)
     * @param  bool $has_improved_events Specifies whether the account has access or does not have access to the improved events. (optional)
     * @param  bool $has_improved_ssl_config Whether this customer can view or edit the SSL config. (optional)
     * @param  bool $has_openstack_logging Specifies whether the account has enabled or not enabled openstack logging. (optional)
     * @param  bool $has_pci Specifies whether the account can edit PCI for a service. (optional)
     * @param  bool $has_pci_passwords Specifies whether PCI passwords are required for the account. (optional)
     * @param  string $id Alphanumeric string identifying the customer. (optional)
     * @param  string $ip_whitelist The range of IP addresses authorized to access the customer account. (optional)
     * @param  string $legal_contact_id The alphanumeric string identifying the account&#39;s legal contact. (optional)
     * @param  string $name The name of the customer, generally the company name. (optional)
     * @param  string $owner_id The alphanumeric string identifying the account owner. (optional)
     * @param  string $phone_number The phone number associated with the account. (optional)
     * @param  string $postal_address The postal address associated with the account. (optional)
     * @param  string $pricing_plan The pricing plan this customer is under. (optional)
     * @param  string $pricing_plan_id The alphanumeric string identifying the pricing plan. (optional)
     * @param  string $security_contact_id The alphanumeric string identifying the account&#39;s security contact. (optional)
     * @param  string $technical_contact_id The alphanumeric string identifying the account&#39;s technical contact. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerAsyncWithHttpInfo($customer_id, $created_at = null, $deleted_at = null, $updated_at = null, $billing_contact_id = null, $billing_network_type = null, $billing_ref = null, $can_configure_wordpress = null, $can_reset_passwords = null, $can_upload_vcl = null, $force_2fa = null, $force_sso = null, $has_account_panel = null, $has_improved_events = null, $has_improved_ssl_config = null, $has_openstack_logging = null, $has_pci = null, $has_pci_passwords = null, $id = null, $ip_whitelist = null, $legal_contact_id = null, $name = null, $owner_id = null, $phone_number = null, $postal_address = null, $pricing_plan = null, $pricing_plan_id = null, $security_contact_id = null, $technical_contact_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\ModelCustomer';
        $request = $this->updateCustomerRequest($customer_id, $created_at, $deleted_at, $updated_at, $billing_contact_id, $billing_network_type, $billing_ref, $can_configure_wordpress, $can_reset_passwords, $can_upload_vcl, $force_2fa, $force_sso, $has_account_panel, $has_improved_events, $has_improved_ssl_config, $has_openstack_logging, $has_pci, $has_pci_passwords, $id, $ip_whitelist, $legal_contact_id, $name, $owner_id, $phone_number, $postal_address, $pricing_plan, $pricing_plan_id, $security_contact_id, $technical_contact_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomer'
     *
     * @param  string $customer_id (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $billing_contact_id The alphanumeric string representing the primary billing contact. (optional)
     * @param  string $billing_network_type Customer&#39;s current network revenue type. Can be &#x60;public&#x60; or &#x60;private&#x60;. (optional)
     * @param  string $billing_ref Used for adding purchased orders to customer&#39;s account. (optional)
     * @param  bool $can_configure_wordpress Whether this customer can view or edit wordpress. (optional)
     * @param  bool $can_reset_passwords Whether this customer can reset passwords. (optional)
     * @param  bool $can_upload_vcl Whether this customer can upload VCL. (optional)
     * @param  bool $force_2fa Specifies whether 2FA is forced or not forced on the customer account. Logs out non-2FA users once 2FA is force enabled. (optional)
     * @param  bool $force_sso Specifies whether SSO is forced or not forced on the customer account. (optional)
     * @param  bool $has_account_panel Specifies whether the account has access or does not have access to the account panel. (optional)
     * @param  bool $has_improved_events Specifies whether the account has access or does not have access to the improved events. (optional)
     * @param  bool $has_improved_ssl_config Whether this customer can view or edit the SSL config. (optional)
     * @param  bool $has_openstack_logging Specifies whether the account has enabled or not enabled openstack logging. (optional)
     * @param  bool $has_pci Specifies whether the account can edit PCI for a service. (optional)
     * @param  bool $has_pci_passwords Specifies whether PCI passwords are required for the account. (optional)
     * @param  string $id Alphanumeric string identifying the customer. (optional)
     * @param  string $ip_whitelist The range of IP addresses authorized to access the customer account. (optional)
     * @param  string $legal_contact_id The alphanumeric string identifying the account&#39;s legal contact. (optional)
     * @param  string $name The name of the customer, generally the company name. (optional)
     * @param  string $owner_id The alphanumeric string identifying the account owner. (optional)
     * @param  string $phone_number The phone number associated with the account. (optional)
     * @param  string $postal_address The postal address associated with the account. (optional)
     * @param  string $pricing_plan The pricing plan this customer is under. (optional)
     * @param  string $pricing_plan_id The alphanumeric string identifying the pricing plan. (optional)
     * @param  string $security_contact_id The alphanumeric string identifying the account&#39;s security contact. (optional)
     * @param  string $technical_contact_id The alphanumeric string identifying the account&#39;s technical contact. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomerRequest($customer_id, $created_at = null, $deleted_at = null, $updated_at = null, $billing_contact_id = null, $billing_network_type = null, $billing_ref = null, $can_configure_wordpress = null, $can_reset_passwords = null, $can_upload_vcl = null, $force_2fa = null, $force_sso = null, $has_account_panel = null, $has_improved_events = null, $has_improved_ssl_config = null, $has_openstack_logging = null, $has_pci = null, $has_pci_passwords = null, $id = null, $ip_whitelist = null, $legal_contact_id = null, $name = null, $owner_id = null, $phone_number = null, $postal_address = null, $pricing_plan = null, $pricing_plan_id = null, $security_contact_id = null, $technical_contact_id = null)
    {
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling updateCustomer'
            );
        }

        $resourcePath = '/customer/{customer_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }

        // form params
        if ($created_at !== null) {
            $formParams['created_at'] = ObjectSerializer::toFormValue($created_at);
        }
        // form params
        if ($deleted_at !== null) {
            $formParams['deleted_at'] = ObjectSerializer::toFormValue($deleted_at);
        }
        // form params
        if ($updated_at !== null) {
            $formParams['updated_at'] = ObjectSerializer::toFormValue($updated_at);
        }
        // form params
        if ($billing_contact_id !== null) {
            $formParams['billing_contact_id'] = ObjectSerializer::toFormValue($billing_contact_id);
        }
        // form params
        if ($billing_network_type !== null) {
            $formParams['billing_network_type'] = ObjectSerializer::toFormValue($billing_network_type);
        }
        // form params
        if ($billing_ref !== null) {
            $formParams['billing_ref'] = ObjectSerializer::toFormValue($billing_ref);
        }
        // form params
        if ($can_configure_wordpress !== null) {
            $formParams['can_configure_wordpress'] = ObjectSerializer::toFormValue($can_configure_wordpress);
        }
        // form params
        if ($can_reset_passwords !== null) {
            $formParams['can_reset_passwords'] = ObjectSerializer::toFormValue($can_reset_passwords);
        }
        // form params
        if ($can_upload_vcl !== null) {
            $formParams['can_upload_vcl'] = ObjectSerializer::toFormValue($can_upload_vcl);
        }
        // form params
        if ($force_2fa !== null) {
            $formParams['force_2fa'] = ObjectSerializer::toFormValue($force_2fa);
        }
        // form params
        if ($force_sso !== null) {
            $formParams['force_sso'] = ObjectSerializer::toFormValue($force_sso);
        }
        // form params
        if ($has_account_panel !== null) {
            $formParams['has_account_panel'] = ObjectSerializer::toFormValue($has_account_panel);
        }
        // form params
        if ($has_improved_events !== null) {
            $formParams['has_improved_events'] = ObjectSerializer::toFormValue($has_improved_events);
        }
        // form params
        if ($has_improved_ssl_config !== null) {
            $formParams['has_improved_ssl_config'] = ObjectSerializer::toFormValue($has_improved_ssl_config);
        }
        // form params
        if ($has_openstack_logging !== null) {
            $formParams['has_openstack_logging'] = ObjectSerializer::toFormValue($has_openstack_logging);
        }
        // form params
        if ($has_pci !== null) {
            $formParams['has_pci'] = ObjectSerializer::toFormValue($has_pci);
        }
        // form params
        if ($has_pci_passwords !== null) {
            $formParams['has_pci_passwords'] = ObjectSerializer::toFormValue($has_pci_passwords);
        }
        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($ip_whitelist !== null) {
            $formParams['ip_whitelist'] = ObjectSerializer::toFormValue($ip_whitelist);
        }
        // form params
        if ($legal_contact_id !== null) {
            $formParams['legal_contact_id'] = ObjectSerializer::toFormValue($legal_contact_id);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($owner_id !== null) {
            $formParams['owner_id'] = ObjectSerializer::toFormValue($owner_id);
        }
        // form params
        if ($phone_number !== null) {
            $formParams['phone_number'] = ObjectSerializer::toFormValue($phone_number);
        }
        // form params
        if ($postal_address !== null) {
            $formParams['postal_address'] = ObjectSerializer::toFormValue($postal_address);
        }
        // form params
        if ($pricing_plan !== null) {
            $formParams['pricing_plan'] = ObjectSerializer::toFormValue($pricing_plan);
        }
        // form params
        if ($pricing_plan_id !== null) {
            $formParams['pricing_plan_id'] = ObjectSerializer::toFormValue($pricing_plan_id);
        }
        // form params
        if ($security_contact_id !== null) {
            $formParams['security_contact_id'] = ObjectSerializer::toFormValue($security_contact_id);
        }
        // form params
        if ($technical_contact_id !== null) {
            $formParams['technical_contact_id'] = ObjectSerializer::toFormValue($technical_contact_id);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
