<?php
/**
 * LoggingElasticsearchApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fastly API
 *
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit developer.fastly.com/reference/api/
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * LoggingElasticsearchApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LoggingElasticsearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createLogElasticsearch
     *
     * Create an Elasticsearch log endpoint
     *
     * @param  string $service_id service_id (required)
     * @param  int $version_id version_id (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $name The name for the real-time logging configuration. (optional)
     * @param  \OpenAPI\Client\Model\LoggingPlacement $placement placement (optional)
     * @param  \OpenAPI\Client\Model\LoggingFormatVersion $format_version format_version (optional)
     * @param  string $response_condition The name of an existing condition in the configured endpoint, or leave blank to always execute. (optional)
     * @param  mixed $format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Elasticsearch can ingest. (optional)
     * @param  string $tls_ca_cert A secure certificate to authenticate a server with. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_cert The client certificate used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_key The client private key used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_hostname The hostname to verify the server&#39;s certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported. (optional, default to 'null')
     * @param  int $request_max_entries The maximum number of logs sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  int $request_max_bytes The maximum number of bytes sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  string $index The name of the Elasticsearch index to send documents (logs) to. The index must follow the Elasticsearch [index format rules](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html). We support [strftime](https://www.man7.org/linux/man-pages/man3/strftime.3.html) interpolated variables inside braces prefixed with a pound symbol. For example, &#x60;#{%F}&#x60; will interpolate as &#x60;YYYY-MM-DD&#x60; with today&#39;s date. (optional)
     * @param  string $url The URL to stream logs to. Must use HTTPS. (optional)
     * @param  string $pipeline The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing. Learn more about creating a pipeline in the [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html). (optional)
     * @param  string $user Basic Auth username. (optional)
     * @param  string $password Basic Auth password. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelLoggingElasticsearch
     */
    public function createLogElasticsearch($service_id, $version_id, $created_at = null, $deleted_at = null, $updated_at = null, $service_id2 = null, $version = null, $name = null, $placement = null, $format_version = null, $response_condition = null, $format = null, $tls_ca_cert = 'null', $tls_client_cert = 'null', $tls_client_key = 'null', $tls_hostname = 'null', $request_max_entries = 0, $request_max_bytes = 0, $index = null, $url = null, $pipeline = null, $user = null, $password = null)
    {
        list($response) = $this->createLogElasticsearchWithHttpInfo($service_id, $version_id, $created_at, $deleted_at, $updated_at, $service_id2, $version, $name, $placement, $format_version, $response_condition, $format, $tls_ca_cert, $tls_client_cert, $tls_client_key, $tls_hostname, $request_max_entries, $request_max_bytes, $index, $url, $pipeline, $user, $password);
        return $response;
    }

    /**
     * Operation createLogElasticsearchWithHttpInfo
     *
     * Create an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $name The name for the real-time logging configuration. (optional)
     * @param  \OpenAPI\Client\Model\LoggingPlacement $placement (optional)
     * @param  \OpenAPI\Client\Model\LoggingFormatVersion $format_version (optional)
     * @param  string $response_condition The name of an existing condition in the configured endpoint, or leave blank to always execute. (optional)
     * @param  mixed $format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Elasticsearch can ingest. (optional)
     * @param  string $tls_ca_cert A secure certificate to authenticate a server with. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_cert The client certificate used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_key The client private key used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_hostname The hostname to verify the server&#39;s certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported. (optional, default to 'null')
     * @param  int $request_max_entries The maximum number of logs sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  int $request_max_bytes The maximum number of bytes sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  string $index The name of the Elasticsearch index to send documents (logs) to. The index must follow the Elasticsearch [index format rules](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html). We support [strftime](https://www.man7.org/linux/man-pages/man3/strftime.3.html) interpolated variables inside braces prefixed with a pound symbol. For example, &#x60;#{%F}&#x60; will interpolate as &#x60;YYYY-MM-DD&#x60; with today&#39;s date. (optional)
     * @param  string $url The URL to stream logs to. Must use HTTPS. (optional)
     * @param  string $pipeline The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing. Learn more about creating a pipeline in the [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html). (optional)
     * @param  string $user Basic Auth username. (optional)
     * @param  string $password Basic Auth password. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelLoggingElasticsearch, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLogElasticsearchWithHttpInfo($service_id, $version_id, $created_at = null, $deleted_at = null, $updated_at = null, $service_id2 = null, $version = null, $name = null, $placement = null, $format_version = null, $response_condition = null, $format = null, $tls_ca_cert = 'null', $tls_client_cert = 'null', $tls_client_key = 'null', $tls_hostname = 'null', $request_max_entries = 0, $request_max_bytes = 0, $index = null, $url = null, $pipeline = null, $user = null, $password = null)
    {
        $request = $this->createLogElasticsearchRequest($service_id, $version_id, $created_at, $deleted_at, $updated_at, $service_id2, $version, $name, $placement, $format_version, $response_condition, $format, $tls_ca_cert, $tls_client_cert, $tls_client_key, $tls_hostname, $request_max_entries, $request_max_bytes, $index, $url, $pipeline, $user, $password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelLoggingElasticsearch' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelLoggingElasticsearch', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModelLoggingElasticsearch';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelLoggingElasticsearch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLogElasticsearchAsync
     *
     * Create an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $name The name for the real-time logging configuration. (optional)
     * @param  \OpenAPI\Client\Model\LoggingPlacement $placement (optional)
     * @param  \OpenAPI\Client\Model\LoggingFormatVersion $format_version (optional)
     * @param  string $response_condition The name of an existing condition in the configured endpoint, or leave blank to always execute. (optional)
     * @param  mixed $format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Elasticsearch can ingest. (optional)
     * @param  string $tls_ca_cert A secure certificate to authenticate a server with. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_cert The client certificate used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_key The client private key used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_hostname The hostname to verify the server&#39;s certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported. (optional, default to 'null')
     * @param  int $request_max_entries The maximum number of logs sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  int $request_max_bytes The maximum number of bytes sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  string $index The name of the Elasticsearch index to send documents (logs) to. The index must follow the Elasticsearch [index format rules](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html). We support [strftime](https://www.man7.org/linux/man-pages/man3/strftime.3.html) interpolated variables inside braces prefixed with a pound symbol. For example, &#x60;#{%F}&#x60; will interpolate as &#x60;YYYY-MM-DD&#x60; with today&#39;s date. (optional)
     * @param  string $url The URL to stream logs to. Must use HTTPS. (optional)
     * @param  string $pipeline The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing. Learn more about creating a pipeline in the [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html). (optional)
     * @param  string $user Basic Auth username. (optional)
     * @param  string $password Basic Auth password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLogElasticsearchAsync($service_id, $version_id, $created_at = null, $deleted_at = null, $updated_at = null, $service_id2 = null, $version = null, $name = null, $placement = null, $format_version = null, $response_condition = null, $format = null, $tls_ca_cert = 'null', $tls_client_cert = 'null', $tls_client_key = 'null', $tls_hostname = 'null', $request_max_entries = 0, $request_max_bytes = 0, $index = null, $url = null, $pipeline = null, $user = null, $password = null)
    {
        return $this->createLogElasticsearchAsyncWithHttpInfo($service_id, $version_id, $created_at, $deleted_at, $updated_at, $service_id2, $version, $name, $placement, $format_version, $response_condition, $format, $tls_ca_cert, $tls_client_cert, $tls_client_key, $tls_hostname, $request_max_entries, $request_max_bytes, $index, $url, $pipeline, $user, $password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLogElasticsearchAsyncWithHttpInfo
     *
     * Create an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $name The name for the real-time logging configuration. (optional)
     * @param  \OpenAPI\Client\Model\LoggingPlacement $placement (optional)
     * @param  \OpenAPI\Client\Model\LoggingFormatVersion $format_version (optional)
     * @param  string $response_condition The name of an existing condition in the configured endpoint, or leave blank to always execute. (optional)
     * @param  mixed $format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Elasticsearch can ingest. (optional)
     * @param  string $tls_ca_cert A secure certificate to authenticate a server with. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_cert The client certificate used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_key The client private key used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_hostname The hostname to verify the server&#39;s certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported. (optional, default to 'null')
     * @param  int $request_max_entries The maximum number of logs sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  int $request_max_bytes The maximum number of bytes sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  string $index The name of the Elasticsearch index to send documents (logs) to. The index must follow the Elasticsearch [index format rules](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html). We support [strftime](https://www.man7.org/linux/man-pages/man3/strftime.3.html) interpolated variables inside braces prefixed with a pound symbol. For example, &#x60;#{%F}&#x60; will interpolate as &#x60;YYYY-MM-DD&#x60; with today&#39;s date. (optional)
     * @param  string $url The URL to stream logs to. Must use HTTPS. (optional)
     * @param  string $pipeline The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing. Learn more about creating a pipeline in the [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html). (optional)
     * @param  string $user Basic Auth username. (optional)
     * @param  string $password Basic Auth password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createLogElasticsearchAsyncWithHttpInfo($service_id, $version_id, $created_at = null, $deleted_at = null, $updated_at = null, $service_id2 = null, $version = null, $name = null, $placement = null, $format_version = null, $response_condition = null, $format = null, $tls_ca_cert = 'null', $tls_client_cert = 'null', $tls_client_key = 'null', $tls_hostname = 'null', $request_max_entries = 0, $request_max_bytes = 0, $index = null, $url = null, $pipeline = null, $user = null, $password = null)
    {
        $returnType = '\OpenAPI\Client\Model\ModelLoggingElasticsearch';
        $request = $this->createLogElasticsearchRequest($service_id, $version_id, $created_at, $deleted_at, $updated_at, $service_id2, $version, $name, $placement, $format_version, $response_condition, $format, $tls_ca_cert, $tls_client_cert, $tls_client_key, $tls_hostname, $request_max_entries, $request_max_bytes, $index, $url, $pipeline, $user, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLogElasticsearch'
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $name The name for the real-time logging configuration. (optional)
     * @param  \OpenAPI\Client\Model\LoggingPlacement $placement (optional)
     * @param  \OpenAPI\Client\Model\LoggingFormatVersion $format_version (optional)
     * @param  string $response_condition The name of an existing condition in the configured endpoint, or leave blank to always execute. (optional)
     * @param  mixed $format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Elasticsearch can ingest. (optional)
     * @param  string $tls_ca_cert A secure certificate to authenticate a server with. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_cert The client certificate used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_key The client private key used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_hostname The hostname to verify the server&#39;s certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported. (optional, default to 'null')
     * @param  int $request_max_entries The maximum number of logs sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  int $request_max_bytes The maximum number of bytes sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  string $index The name of the Elasticsearch index to send documents (logs) to. The index must follow the Elasticsearch [index format rules](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html). We support [strftime](https://www.man7.org/linux/man-pages/man3/strftime.3.html) interpolated variables inside braces prefixed with a pound symbol. For example, &#x60;#{%F}&#x60; will interpolate as &#x60;YYYY-MM-DD&#x60; with today&#39;s date. (optional)
     * @param  string $url The URL to stream logs to. Must use HTTPS. (optional)
     * @param  string $pipeline The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing. Learn more about creating a pipeline in the [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html). (optional)
     * @param  string $user Basic Auth username. (optional)
     * @param  string $password Basic Auth password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLogElasticsearchRequest($service_id, $version_id, $created_at = null, $deleted_at = null, $updated_at = null, $service_id2 = null, $version = null, $name = null, $placement = null, $format_version = null, $response_condition = null, $format = null, $tls_ca_cert = 'null', $tls_client_cert = 'null', $tls_client_key = 'null', $tls_hostname = 'null', $request_max_entries = 0, $request_max_bytes = 0, $index = null, $url = null, $pipeline = null, $user = null, $password = null)
    {
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling createLogElasticsearch'
            );
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null || (is_array($version_id) && count($version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_id when calling createLogElasticsearch'
            );
        }

        $resourcePath = '/service/{service_id}/version/{version_id}/logging/elasticsearch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'version_id' . '}',
                ObjectSerializer::toPathValue($version_id),
                $resourcePath
            );
        }

        // form params
        if ($created_at !== null) {
            $formParams['created_at'] = ObjectSerializer::toFormValue($created_at);
        }
        // form params
        if ($deleted_at !== null) {
            $formParams['deleted_at'] = ObjectSerializer::toFormValue($deleted_at);
        }
        // form params
        if ($updated_at !== null) {
            $formParams['updated_at'] = ObjectSerializer::toFormValue($updated_at);
        }
        // form params
        if ($service_id2 !== null) {
            $formParams['service_id'] = ObjectSerializer::toFormValue($service_id2);
        }
        // form params
        if ($version !== null) {
            $formParams['version'] = ObjectSerializer::toFormValue($version);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($placement !== null) {
            $formParams['placement'] = ObjectSerializer::toFormValue($placement);
        }
        // form params
        if ($format_version !== null) {
            $formParams['format_version'] = ObjectSerializer::toFormValue($format_version);
        }
        // form params
        if ($response_condition !== null) {
            $formParams['response_condition'] = ObjectSerializer::toFormValue($response_condition);
        }
        // form params
        if ($format !== null) {
            $formParams['format'] = ObjectSerializer::toFormValue($format);
        }
        // form params
        if ($tls_ca_cert !== null) {
            $formParams['tls_ca_cert'] = ObjectSerializer::toFormValue($tls_ca_cert);
        }
        // form params
        if ($tls_client_cert !== null) {
            $formParams['tls_client_cert'] = ObjectSerializer::toFormValue($tls_client_cert);
        }
        // form params
        if ($tls_client_key !== null) {
            $formParams['tls_client_key'] = ObjectSerializer::toFormValue($tls_client_key);
        }
        // form params
        if ($tls_hostname !== null) {
            $formParams['tls_hostname'] = ObjectSerializer::toFormValue($tls_hostname);
        }
        // form params
        if ($request_max_entries !== null) {
            $formParams['request_max_entries'] = ObjectSerializer::toFormValue($request_max_entries);
        }
        // form params
        if ($request_max_bytes !== null) {
            $formParams['request_max_bytes'] = ObjectSerializer::toFormValue($request_max_bytes);
        }
        // form params
        if ($index !== null) {
            $formParams['index'] = ObjectSerializer::toFormValue($index);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($pipeline !== null) {
            $formParams['pipeline'] = ObjectSerializer::toFormValue($pipeline);
        }
        // form params
        if ($user !== null) {
            $formParams['user'] = ObjectSerializer::toFormValue($user);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLogElasticsearch
     *
     * Delete an Elasticsearch log endpoint
     *
     * @param  string $service_id service_id (required)
     * @param  int $version_id version_id (required)
     * @param  string $logging_elasticsearch_name logging_elasticsearch_name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function deleteLogElasticsearch($service_id, $version_id, $logging_elasticsearch_name)
    {
        list($response) = $this->deleteLogElasticsearchWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name);
        return $response;
    }

    /**
     * Operation deleteLogElasticsearchWithHttpInfo
     *
     * Delete an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLogElasticsearchWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name)
    {
        $request = $this->deleteLogElasticsearchRequest($service_id, $version_id, $logging_elasticsearch_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLogElasticsearchAsync
     *
     * Delete an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLogElasticsearchAsync($service_id, $version_id, $logging_elasticsearch_name)
    {
        return $this->deleteLogElasticsearchAsyncWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLogElasticsearchAsyncWithHttpInfo
     *
     * Delete an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLogElasticsearchAsyncWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name)
    {
        $returnType = 'object';
        $request = $this->deleteLogElasticsearchRequest($service_id, $version_id, $logging_elasticsearch_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLogElasticsearch'
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLogElasticsearchRequest($service_id, $version_id, $logging_elasticsearch_name)
    {
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling deleteLogElasticsearch'
            );
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null || (is_array($version_id) && count($version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_id when calling deleteLogElasticsearch'
            );
        }
        // verify the required parameter 'logging_elasticsearch_name' is set
        if ($logging_elasticsearch_name === null || (is_array($logging_elasticsearch_name) && count($logging_elasticsearch_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $logging_elasticsearch_name when calling deleteLogElasticsearch'
            );
        }

        $resourcePath = '/service/{service_id}/version/{version_id}/logging/elasticsearch/{logging_elasticsearch_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'version_id' . '}',
                ObjectSerializer::toPathValue($version_id),
                $resourcePath
            );
        }
        // path params
        if ($logging_elasticsearch_name !== null) {
            $resourcePath = str_replace(
                '{' . 'logging_elasticsearch_name' . '}',
                ObjectSerializer::toPathValue($logging_elasticsearch_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLogElasticsearch
     *
     * Get an Elasticsearch log endpoint
     *
     * @param  string $service_id service_id (required)
     * @param  int $version_id version_id (required)
     * @param  string $logging_elasticsearch_name logging_elasticsearch_name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelLoggingElasticsearch
     */
    public function getLogElasticsearch($service_id, $version_id, $logging_elasticsearch_name)
    {
        list($response) = $this->getLogElasticsearchWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name);
        return $response;
    }

    /**
     * Operation getLogElasticsearchWithHttpInfo
     *
     * Get an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelLoggingElasticsearch, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLogElasticsearchWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name)
    {
        $request = $this->getLogElasticsearchRequest($service_id, $version_id, $logging_elasticsearch_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelLoggingElasticsearch' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelLoggingElasticsearch', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModelLoggingElasticsearch';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelLoggingElasticsearch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLogElasticsearchAsync
     *
     * Get an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLogElasticsearchAsync($service_id, $version_id, $logging_elasticsearch_name)
    {
        return $this->getLogElasticsearchAsyncWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLogElasticsearchAsyncWithHttpInfo
     *
     * Get an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLogElasticsearchAsyncWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name)
    {
        $returnType = '\OpenAPI\Client\Model\ModelLoggingElasticsearch';
        $request = $this->getLogElasticsearchRequest($service_id, $version_id, $logging_elasticsearch_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLogElasticsearch'
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLogElasticsearchRequest($service_id, $version_id, $logging_elasticsearch_name)
    {
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling getLogElasticsearch'
            );
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null || (is_array($version_id) && count($version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_id when calling getLogElasticsearch'
            );
        }
        // verify the required parameter 'logging_elasticsearch_name' is set
        if ($logging_elasticsearch_name === null || (is_array($logging_elasticsearch_name) && count($logging_elasticsearch_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $logging_elasticsearch_name when calling getLogElasticsearch'
            );
        }

        $resourcePath = '/service/{service_id}/version/{version_id}/logging/elasticsearch/{logging_elasticsearch_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'version_id' . '}',
                ObjectSerializer::toPathValue($version_id),
                $resourcePath
            );
        }
        // path params
        if ($logging_elasticsearch_name !== null) {
            $resourcePath = str_replace(
                '{' . 'logging_elasticsearch_name' . '}',
                ObjectSerializer::toPathValue($logging_elasticsearch_name),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listLogElasticsearch
     *
     * List Elasticsearch log endpoints
     *
     * @param  string $service_id service_id (required)
     * @param  int $version_id version_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelLoggingElasticsearch[]
     */
    public function listLogElasticsearch($service_id, $version_id)
    {
        list($response) = $this->listLogElasticsearchWithHttpInfo($service_id, $version_id);
        return $response;
    }

    /**
     * Operation listLogElasticsearchWithHttpInfo
     *
     * List Elasticsearch log endpoints
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelLoggingElasticsearch[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listLogElasticsearchWithHttpInfo($service_id, $version_id)
    {
        $request = $this->listLogElasticsearchRequest($service_id, $version_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelLoggingElasticsearch[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelLoggingElasticsearch[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModelLoggingElasticsearch[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelLoggingElasticsearch[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listLogElasticsearchAsync
     *
     * List Elasticsearch log endpoints
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listLogElasticsearchAsync($service_id, $version_id)
    {
        return $this->listLogElasticsearchAsyncWithHttpInfo($service_id, $version_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listLogElasticsearchAsyncWithHttpInfo
     *
     * List Elasticsearch log endpoints
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listLogElasticsearchAsyncWithHttpInfo($service_id, $version_id)
    {
        $returnType = '\OpenAPI\Client\Model\ModelLoggingElasticsearch[]';
        $request = $this->listLogElasticsearchRequest($service_id, $version_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listLogElasticsearch'
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listLogElasticsearchRequest($service_id, $version_id)
    {
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling listLogElasticsearch'
            );
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null || (is_array($version_id) && count($version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_id when calling listLogElasticsearch'
            );
        }

        $resourcePath = '/service/{service_id}/version/{version_id}/logging/elasticsearch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'version_id' . '}',
                ObjectSerializer::toPathValue($version_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLogElasticsearch
     *
     * Update an Elasticsearch log endpoint
     *
     * @param  string $service_id service_id (required)
     * @param  int $version_id version_id (required)
     * @param  string $logging_elasticsearch_name logging_elasticsearch_name (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $name The name for the real-time logging configuration. (optional)
     * @param  \OpenAPI\Client\Model\LoggingPlacement $placement placement (optional)
     * @param  \OpenAPI\Client\Model\LoggingFormatVersion $format_version format_version (optional)
     * @param  string $response_condition The name of an existing condition in the configured endpoint, or leave blank to always execute. (optional)
     * @param  mixed $format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Elasticsearch can ingest. (optional)
     * @param  string $tls_ca_cert A secure certificate to authenticate a server with. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_cert The client certificate used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_key The client private key used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_hostname The hostname to verify the server&#39;s certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported. (optional, default to 'null')
     * @param  int $request_max_entries The maximum number of logs sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  int $request_max_bytes The maximum number of bytes sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  string $index The name of the Elasticsearch index to send documents (logs) to. The index must follow the Elasticsearch [index format rules](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html). We support [strftime](https://www.man7.org/linux/man-pages/man3/strftime.3.html) interpolated variables inside braces prefixed with a pound symbol. For example, &#x60;#{%F}&#x60; will interpolate as &#x60;YYYY-MM-DD&#x60; with today&#39;s date. (optional)
     * @param  string $url The URL to stream logs to. Must use HTTPS. (optional)
     * @param  string $pipeline The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing. Learn more about creating a pipeline in the [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html). (optional)
     * @param  string $user Basic Auth username. (optional)
     * @param  string $password Basic Auth password. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ModelLoggingElasticsearch
     */
    public function updateLogElasticsearch($service_id, $version_id, $logging_elasticsearch_name, $created_at = null, $deleted_at = null, $updated_at = null, $service_id2 = null, $version = null, $name = null, $placement = null, $format_version = null, $response_condition = null, $format = null, $tls_ca_cert = 'null', $tls_client_cert = 'null', $tls_client_key = 'null', $tls_hostname = 'null', $request_max_entries = 0, $request_max_bytes = 0, $index = null, $url = null, $pipeline = null, $user = null, $password = null)
    {
        list($response) = $this->updateLogElasticsearchWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name, $created_at, $deleted_at, $updated_at, $service_id2, $version, $name, $placement, $format_version, $response_condition, $format, $tls_ca_cert, $tls_client_cert, $tls_client_key, $tls_hostname, $request_max_entries, $request_max_bytes, $index, $url, $pipeline, $user, $password);
        return $response;
    }

    /**
     * Operation updateLogElasticsearchWithHttpInfo
     *
     * Update an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $name The name for the real-time logging configuration. (optional)
     * @param  \OpenAPI\Client\Model\LoggingPlacement $placement (optional)
     * @param  \OpenAPI\Client\Model\LoggingFormatVersion $format_version (optional)
     * @param  string $response_condition The name of an existing condition in the configured endpoint, or leave blank to always execute. (optional)
     * @param  mixed $format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Elasticsearch can ingest. (optional)
     * @param  string $tls_ca_cert A secure certificate to authenticate a server with. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_cert The client certificate used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_key The client private key used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_hostname The hostname to verify the server&#39;s certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported. (optional, default to 'null')
     * @param  int $request_max_entries The maximum number of logs sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  int $request_max_bytes The maximum number of bytes sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  string $index The name of the Elasticsearch index to send documents (logs) to. The index must follow the Elasticsearch [index format rules](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html). We support [strftime](https://www.man7.org/linux/man-pages/man3/strftime.3.html) interpolated variables inside braces prefixed with a pound symbol. For example, &#x60;#{%F}&#x60; will interpolate as &#x60;YYYY-MM-DD&#x60; with today&#39;s date. (optional)
     * @param  string $url The URL to stream logs to. Must use HTTPS. (optional)
     * @param  string $pipeline The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing. Learn more about creating a pipeline in the [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html). (optional)
     * @param  string $user Basic Auth username. (optional)
     * @param  string $password Basic Auth password. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ModelLoggingElasticsearch, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLogElasticsearchWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name, $created_at = null, $deleted_at = null, $updated_at = null, $service_id2 = null, $version = null, $name = null, $placement = null, $format_version = null, $response_condition = null, $format = null, $tls_ca_cert = 'null', $tls_client_cert = 'null', $tls_client_key = 'null', $tls_hostname = 'null', $request_max_entries = 0, $request_max_bytes = 0, $index = null, $url = null, $pipeline = null, $user = null, $password = null)
    {
        $request = $this->updateLogElasticsearchRequest($service_id, $version_id, $logging_elasticsearch_name, $created_at, $deleted_at, $updated_at, $service_id2, $version, $name, $placement, $format_version, $response_condition, $format, $tls_ca_cert, $tls_client_cert, $tls_client_key, $tls_hostname, $request_max_entries, $request_max_bytes, $index, $url, $pipeline, $user, $password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ModelLoggingElasticsearch' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ModelLoggingElasticsearch', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ModelLoggingElasticsearch';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ModelLoggingElasticsearch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLogElasticsearchAsync
     *
     * Update an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $name The name for the real-time logging configuration. (optional)
     * @param  \OpenAPI\Client\Model\LoggingPlacement $placement (optional)
     * @param  \OpenAPI\Client\Model\LoggingFormatVersion $format_version (optional)
     * @param  string $response_condition The name of an existing condition in the configured endpoint, or leave blank to always execute. (optional)
     * @param  mixed $format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Elasticsearch can ingest. (optional)
     * @param  string $tls_ca_cert A secure certificate to authenticate a server with. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_cert The client certificate used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_key The client private key used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_hostname The hostname to verify the server&#39;s certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported. (optional, default to 'null')
     * @param  int $request_max_entries The maximum number of logs sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  int $request_max_bytes The maximum number of bytes sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  string $index The name of the Elasticsearch index to send documents (logs) to. The index must follow the Elasticsearch [index format rules](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html). We support [strftime](https://www.man7.org/linux/man-pages/man3/strftime.3.html) interpolated variables inside braces prefixed with a pound symbol. For example, &#x60;#{%F}&#x60; will interpolate as &#x60;YYYY-MM-DD&#x60; with today&#39;s date. (optional)
     * @param  string $url The URL to stream logs to. Must use HTTPS. (optional)
     * @param  string $pipeline The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing. Learn more about creating a pipeline in the [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html). (optional)
     * @param  string $user Basic Auth username. (optional)
     * @param  string $password Basic Auth password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLogElasticsearchAsync($service_id, $version_id, $logging_elasticsearch_name, $created_at = null, $deleted_at = null, $updated_at = null, $service_id2 = null, $version = null, $name = null, $placement = null, $format_version = null, $response_condition = null, $format = null, $tls_ca_cert = 'null', $tls_client_cert = 'null', $tls_client_key = 'null', $tls_hostname = 'null', $request_max_entries = 0, $request_max_bytes = 0, $index = null, $url = null, $pipeline = null, $user = null, $password = null)
    {
        return $this->updateLogElasticsearchAsyncWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name, $created_at, $deleted_at, $updated_at, $service_id2, $version, $name, $placement, $format_version, $response_condition, $format, $tls_ca_cert, $tls_client_cert, $tls_client_key, $tls_hostname, $request_max_entries, $request_max_bytes, $index, $url, $pipeline, $user, $password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLogElasticsearchAsyncWithHttpInfo
     *
     * Update an Elasticsearch log endpoint
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $name The name for the real-time logging configuration. (optional)
     * @param  \OpenAPI\Client\Model\LoggingPlacement $placement (optional)
     * @param  \OpenAPI\Client\Model\LoggingFormatVersion $format_version (optional)
     * @param  string $response_condition The name of an existing condition in the configured endpoint, or leave blank to always execute. (optional)
     * @param  mixed $format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Elasticsearch can ingest. (optional)
     * @param  string $tls_ca_cert A secure certificate to authenticate a server with. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_cert The client certificate used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_key The client private key used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_hostname The hostname to verify the server&#39;s certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported. (optional, default to 'null')
     * @param  int $request_max_entries The maximum number of logs sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  int $request_max_bytes The maximum number of bytes sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  string $index The name of the Elasticsearch index to send documents (logs) to. The index must follow the Elasticsearch [index format rules](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html). We support [strftime](https://www.man7.org/linux/man-pages/man3/strftime.3.html) interpolated variables inside braces prefixed with a pound symbol. For example, &#x60;#{%F}&#x60; will interpolate as &#x60;YYYY-MM-DD&#x60; with today&#39;s date. (optional)
     * @param  string $url The URL to stream logs to. Must use HTTPS. (optional)
     * @param  string $pipeline The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing. Learn more about creating a pipeline in the [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html). (optional)
     * @param  string $user Basic Auth username. (optional)
     * @param  string $password Basic Auth password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLogElasticsearchAsyncWithHttpInfo($service_id, $version_id, $logging_elasticsearch_name, $created_at = null, $deleted_at = null, $updated_at = null, $service_id2 = null, $version = null, $name = null, $placement = null, $format_version = null, $response_condition = null, $format = null, $tls_ca_cert = 'null', $tls_client_cert = 'null', $tls_client_key = 'null', $tls_hostname = 'null', $request_max_entries = 0, $request_max_bytes = 0, $index = null, $url = null, $pipeline = null, $user = null, $password = null)
    {
        $returnType = '\OpenAPI\Client\Model\ModelLoggingElasticsearch';
        $request = $this->updateLogElasticsearchRequest($service_id, $version_id, $logging_elasticsearch_name, $created_at, $deleted_at, $updated_at, $service_id2, $version, $name, $placement, $format_version, $response_condition, $format, $tls_ca_cert, $tls_client_cert, $tls_client_key, $tls_hostname, $request_max_entries, $request_max_bytes, $index, $url, $pipeline, $user, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLogElasticsearch'
     *
     * @param  string $service_id (required)
     * @param  int $version_id (required)
     * @param  string $logging_elasticsearch_name (required)
     * @param  string $created_at Date and time in ISO 8601 format. (optional)
     * @param  string $deleted_at Date and time in ISO 8601 format. (optional)
     * @param  string $updated_at Date and time in ISO 8601 format. (optional)
     * @param  string $service_id2 Alphanumeric string identifying the service. (optional)
     * @param  int $version Integer identifying a service version. (optional)
     * @param  string $name The name for the real-time logging configuration. (optional)
     * @param  \OpenAPI\Client\Model\LoggingPlacement $placement (optional)
     * @param  \OpenAPI\Client\Model\LoggingFormatVersion $format_version (optional)
     * @param  string $response_condition The name of an existing condition in the configured endpoint, or leave blank to always execute. (optional)
     * @param  mixed $format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats). Must produce valid JSON that Elasticsearch can ingest. (optional)
     * @param  string $tls_ca_cert A secure certificate to authenticate a server with. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_cert The client certificate used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_client_key The client private key used to make authenticated requests. Must be in PEM format. (optional, default to 'null')
     * @param  string $tls_hostname The hostname to verify the server&#39;s certificate. This should be one of the Subject Alternative Name (SAN) fields for the certificate. Common Names (CN) are not supported. (optional, default to 'null')
     * @param  int $request_max_entries The maximum number of logs sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  int $request_max_bytes The maximum number of bytes sent in one request. Defaults &#x60;0&#x60; for unbounded. (optional, default to 0)
     * @param  string $index The name of the Elasticsearch index to send documents (logs) to. The index must follow the Elasticsearch [index format rules](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html). We support [strftime](https://www.man7.org/linux/man-pages/man3/strftime.3.html) interpolated variables inside braces prefixed with a pound symbol. For example, &#x60;#{%F}&#x60; will interpolate as &#x60;YYYY-MM-DD&#x60; with today&#39;s date. (optional)
     * @param  string $url The URL to stream logs to. Must use HTTPS. (optional)
     * @param  string $pipeline The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing. Learn more about creating a pipeline in the [Elasticsearch docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html). (optional)
     * @param  string $user Basic Auth username. (optional)
     * @param  string $password Basic Auth password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLogElasticsearchRequest($service_id, $version_id, $logging_elasticsearch_name, $created_at = null, $deleted_at = null, $updated_at = null, $service_id2 = null, $version = null, $name = null, $placement = null, $format_version = null, $response_condition = null, $format = null, $tls_ca_cert = 'null', $tls_client_cert = 'null', $tls_client_key = 'null', $tls_hostname = 'null', $request_max_entries = 0, $request_max_bytes = 0, $index = null, $url = null, $pipeline = null, $user = null, $password = null)
    {
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling updateLogElasticsearch'
            );
        }
        // verify the required parameter 'version_id' is set
        if ($version_id === null || (is_array($version_id) && count($version_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version_id when calling updateLogElasticsearch'
            );
        }
        // verify the required parameter 'logging_elasticsearch_name' is set
        if ($logging_elasticsearch_name === null || (is_array($logging_elasticsearch_name) && count($logging_elasticsearch_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $logging_elasticsearch_name when calling updateLogElasticsearch'
            );
        }

        $resourcePath = '/service/{service_id}/version/{version_id}/logging/elasticsearch/{logging_elasticsearch_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }
        // path params
        if ($version_id !== null) {
            $resourcePath = str_replace(
                '{' . 'version_id' . '}',
                ObjectSerializer::toPathValue($version_id),
                $resourcePath
            );
        }
        // path params
        if ($logging_elasticsearch_name !== null) {
            $resourcePath = str_replace(
                '{' . 'logging_elasticsearch_name' . '}',
                ObjectSerializer::toPathValue($logging_elasticsearch_name),
                $resourcePath
            );
        }

        // form params
        if ($created_at !== null) {
            $formParams['created_at'] = ObjectSerializer::toFormValue($created_at);
        }
        // form params
        if ($deleted_at !== null) {
            $formParams['deleted_at'] = ObjectSerializer::toFormValue($deleted_at);
        }
        // form params
        if ($updated_at !== null) {
            $formParams['updated_at'] = ObjectSerializer::toFormValue($updated_at);
        }
        // form params
        if ($service_id2 !== null) {
            $formParams['service_id'] = ObjectSerializer::toFormValue($service_id2);
        }
        // form params
        if ($version !== null) {
            $formParams['version'] = ObjectSerializer::toFormValue($version);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($placement !== null) {
            $formParams['placement'] = ObjectSerializer::toFormValue($placement);
        }
        // form params
        if ($format_version !== null) {
            $formParams['format_version'] = ObjectSerializer::toFormValue($format_version);
        }
        // form params
        if ($response_condition !== null) {
            $formParams['response_condition'] = ObjectSerializer::toFormValue($response_condition);
        }
        // form params
        if ($format !== null) {
            $formParams['format'] = ObjectSerializer::toFormValue($format);
        }
        // form params
        if ($tls_ca_cert !== null) {
            $formParams['tls_ca_cert'] = ObjectSerializer::toFormValue($tls_ca_cert);
        }
        // form params
        if ($tls_client_cert !== null) {
            $formParams['tls_client_cert'] = ObjectSerializer::toFormValue($tls_client_cert);
        }
        // form params
        if ($tls_client_key !== null) {
            $formParams['tls_client_key'] = ObjectSerializer::toFormValue($tls_client_key);
        }
        // form params
        if ($tls_hostname !== null) {
            $formParams['tls_hostname'] = ObjectSerializer::toFormValue($tls_hostname);
        }
        // form params
        if ($request_max_entries !== null) {
            $formParams['request_max_entries'] = ObjectSerializer::toFormValue($request_max_entries);
        }
        // form params
        if ($request_max_bytes !== null) {
            $formParams['request_max_bytes'] = ObjectSerializer::toFormValue($request_max_bytes);
        }
        // form params
        if ($index !== null) {
            $formParams['index'] = ObjectSerializer::toFormValue($index);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($pipeline !== null) {
            $formParams['pipeline'] = ObjectSerializer::toFormValue($pipeline);
        }
        // form params
        if ($user !== null) {
            $formParams['user'] = ObjectSerializer::toFormValue($user);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
