<?php
/**
 * WafExclusionsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fastly API
 *
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit developer.fastly.com/reference/api/
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * WafExclusionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WafExclusionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createWafRuleExclusion
     *
     * Create a WAF rule exclusion
     *
     * @param  string $firewall_id firewall_id (required)
     * @param  int $firewall_version_number firewall_version_number (required)
     * @param  \OpenAPI\Client\Model\InlineObject2 $inline_object2 inline_object2 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createWafRuleExclusion($firewall_id, $firewall_version_number, $inline_object2 = null)
    {
        $this->createWafRuleExclusionWithHttpInfo($firewall_id, $firewall_version_number, $inline_object2);
    }

    /**
     * Operation createWafRuleExclusionWithHttpInfo
     *
     * Create a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  \OpenAPI\Client\Model\InlineObject2 $inline_object2 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWafRuleExclusionWithHttpInfo($firewall_id, $firewall_version_number, $inline_object2 = null)
    {
        $request = $this->createWafRuleExclusionRequest($firewall_id, $firewall_version_number, $inline_object2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createWafRuleExclusionAsync
     *
     * Create a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  \OpenAPI\Client\Model\InlineObject2 $inline_object2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWafRuleExclusionAsync($firewall_id, $firewall_version_number, $inline_object2 = null)
    {
        return $this->createWafRuleExclusionAsyncWithHttpInfo($firewall_id, $firewall_version_number, $inline_object2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWafRuleExclusionAsyncWithHttpInfo
     *
     * Create a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  \OpenAPI\Client\Model\InlineObject2 $inline_object2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWafRuleExclusionAsyncWithHttpInfo($firewall_id, $firewall_version_number, $inline_object2 = null)
    {
        $returnType = '';
        $request = $this->createWafRuleExclusionRequest($firewall_id, $firewall_version_number, $inline_object2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWafRuleExclusion'
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  \OpenAPI\Client\Model\InlineObject2 $inline_object2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createWafRuleExclusionRequest($firewall_id, $firewall_version_number, $inline_object2 = null)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling createWafRuleExclusion'
            );
        }
        // verify the required parameter 'firewall_version_number' is set
        if ($firewall_version_number === null || (is_array($firewall_version_number) && count($firewall_version_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_version_number when calling createWafRuleExclusion'
            );
        }

        $resourcePath = '/waf/firewalls/{firewall_id}/versions/{firewall_version_number}/exclusions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($firewall_id !== null) {
            $resourcePath = str_replace(
                '{' . 'firewall_id' . '}',
                ObjectSerializer::toPathValue($firewall_id),
                $resourcePath
            );
        }
        // path params
        if ($firewall_version_number !== null) {
            $resourcePath = str_replace(
                '{' . 'firewall_version_number' . '}',
                ObjectSerializer::toPathValue($firewall_version_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                ['application/vnd.api+json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object2)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object2));
            } else {
                $httpBody = $inline_object2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWafRuleExclusion
     *
     * Delete a WAF rule exclusion
     *
     * @param  string $firewall_id firewall_id (required)
     * @param  int $firewall_version_number firewall_version_number (required)
     * @param  int $exclusion_number exclusion_number (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWafRuleExclusion($firewall_id, $firewall_version_number, $exclusion_number)
    {
        $this->deleteWafRuleExclusionWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number);
    }

    /**
     * Operation deleteWafRuleExclusionWithHttpInfo
     *
     * Delete a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWafRuleExclusionWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number)
    {
        $request = $this->deleteWafRuleExclusionRequest($firewall_id, $firewall_version_number, $exclusion_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWafRuleExclusionAsync
     *
     * Delete a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWafRuleExclusionAsync($firewall_id, $firewall_version_number, $exclusion_number)
    {
        return $this->deleteWafRuleExclusionAsyncWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWafRuleExclusionAsyncWithHttpInfo
     *
     * Delete a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWafRuleExclusionAsyncWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number)
    {
        $returnType = '';
        $request = $this->deleteWafRuleExclusionRequest($firewall_id, $firewall_version_number, $exclusion_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWafRuleExclusion'
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteWafRuleExclusionRequest($firewall_id, $firewall_version_number, $exclusion_number)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling deleteWafRuleExclusion'
            );
        }
        // verify the required parameter 'firewall_version_number' is set
        if ($firewall_version_number === null || (is_array($firewall_version_number) && count($firewall_version_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_version_number when calling deleteWafRuleExclusion'
            );
        }
        // verify the required parameter 'exclusion_number' is set
        if ($exclusion_number === null || (is_array($exclusion_number) && count($exclusion_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exclusion_number when calling deleteWafRuleExclusion'
            );
        }

        $resourcePath = '/waf/firewalls/{firewall_id}/versions/{firewall_version_number}/exclusions/{exclusion_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($firewall_id !== null) {
            $resourcePath = str_replace(
                '{' . 'firewall_id' . '}',
                ObjectSerializer::toPathValue($firewall_id),
                $resourcePath
            );
        }
        // path params
        if ($firewall_version_number !== null) {
            $resourcePath = str_replace(
                '{' . 'firewall_version_number' . '}',
                ObjectSerializer::toPathValue($firewall_version_number),
                $resourcePath
            );
        }
        // path params
        if ($exclusion_number !== null) {
            $resourcePath = str_replace(
                '{' . 'exclusion_number' . '}',
                ObjectSerializer::toPathValue($exclusion_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWafRuleExclusion
     *
     * Get a WAF rule exclusion
     *
     * @param  string $firewall_id firewall_id (required)
     * @param  int $firewall_version_number firewall_version_number (required)
     * @param  int $exclusion_number exclusion_number (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getWafRuleExclusion($firewall_id, $firewall_version_number, $exclusion_number)
    {
        $this->getWafRuleExclusionWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number);
    }

    /**
     * Operation getWafRuleExclusionWithHttpInfo
     *
     * Get a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWafRuleExclusionWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number)
    {
        $request = $this->getWafRuleExclusionRequest($firewall_id, $firewall_version_number, $exclusion_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getWafRuleExclusionAsync
     *
     * Get a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWafRuleExclusionAsync($firewall_id, $firewall_version_number, $exclusion_number)
    {
        return $this->getWafRuleExclusionAsyncWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWafRuleExclusionAsyncWithHttpInfo
     *
     * Get a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWafRuleExclusionAsyncWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number)
    {
        $returnType = '';
        $request = $this->getWafRuleExclusionRequest($firewall_id, $firewall_version_number, $exclusion_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWafRuleExclusion'
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWafRuleExclusionRequest($firewall_id, $firewall_version_number, $exclusion_number)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling getWafRuleExclusion'
            );
        }
        // verify the required parameter 'firewall_version_number' is set
        if ($firewall_version_number === null || (is_array($firewall_version_number) && count($firewall_version_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_version_number when calling getWafRuleExclusion'
            );
        }
        // verify the required parameter 'exclusion_number' is set
        if ($exclusion_number === null || (is_array($exclusion_number) && count($exclusion_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exclusion_number when calling getWafRuleExclusion'
            );
        }

        $resourcePath = '/waf/firewalls/{firewall_id}/versions/{firewall_version_number}/exclusions/{exclusion_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($firewall_id !== null) {
            $resourcePath = str_replace(
                '{' . 'firewall_id' . '}',
                ObjectSerializer::toPathValue($firewall_id),
                $resourcePath
            );
        }
        // path params
        if ($firewall_version_number !== null) {
            $resourcePath = str_replace(
                '{' . 'firewall_version_number' . '}',
                ObjectSerializer::toPathValue($firewall_version_number),
                $resourcePath
            );
        }
        // path params
        if ($exclusion_number !== null) {
            $resourcePath = str_replace(
                '{' . 'exclusion_number' . '}',
                ObjectSerializer::toPathValue($exclusion_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listWafRuleExclusions
     *
     * List WAF rule exclusions
     *
     * @param  string $firewall_id firewall_id (required)
     * @param  int $firewall_version_number firewall_version_number (required)
     * @param  string $filter_exclusion_type Filters the results based on this exclusion type. (optional)
     * @param  string $filter_name Filters the results based on name. (optional)
     * @param  int $filter_waf_rules_modsec_rule_id Filters the results based on this ModSecurity rule ID. (optional)
     * @param  int $page_number Current page. (optional)
     * @param  int $page_size Number of records per page. (optional, default to 20)
     * @param  string $include Include relationships. Optional, comma-separated values. Permitted values: &#x60;waf_rules&#x60; and &#x60;waf_rule_revisions&#x60;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function listWafRuleExclusions($firewall_id, $firewall_version_number, $filter_exclusion_type = null, $filter_name = null, $filter_waf_rules_modsec_rule_id = null, $page_number = null, $page_size = 20, $include = null)
    {
        $this->listWafRuleExclusionsWithHttpInfo($firewall_id, $firewall_version_number, $filter_exclusion_type, $filter_name, $filter_waf_rules_modsec_rule_id, $page_number, $page_size, $include);
    }

    /**
     * Operation listWafRuleExclusionsWithHttpInfo
     *
     * List WAF rule exclusions
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  string $filter_exclusion_type Filters the results based on this exclusion type. (optional)
     * @param  string $filter_name Filters the results based on name. (optional)
     * @param  int $filter_waf_rules_modsec_rule_id Filters the results based on this ModSecurity rule ID. (optional)
     * @param  int $page_number Current page. (optional)
     * @param  int $page_size Number of records per page. (optional, default to 20)
     * @param  string $include Include relationships. Optional, comma-separated values. Permitted values: &#x60;waf_rules&#x60; and &#x60;waf_rule_revisions&#x60;. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listWafRuleExclusionsWithHttpInfo($firewall_id, $firewall_version_number, $filter_exclusion_type = null, $filter_name = null, $filter_waf_rules_modsec_rule_id = null, $page_number = null, $page_size = 20, $include = null)
    {
        $request = $this->listWafRuleExclusionsRequest($firewall_id, $firewall_version_number, $filter_exclusion_type, $filter_name, $filter_waf_rules_modsec_rule_id, $page_number, $page_size, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation listWafRuleExclusionsAsync
     *
     * List WAF rule exclusions
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  string $filter_exclusion_type Filters the results based on this exclusion type. (optional)
     * @param  string $filter_name Filters the results based on name. (optional)
     * @param  int $filter_waf_rules_modsec_rule_id Filters the results based on this ModSecurity rule ID. (optional)
     * @param  int $page_number Current page. (optional)
     * @param  int $page_size Number of records per page. (optional, default to 20)
     * @param  string $include Include relationships. Optional, comma-separated values. Permitted values: &#x60;waf_rules&#x60; and &#x60;waf_rule_revisions&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listWafRuleExclusionsAsync($firewall_id, $firewall_version_number, $filter_exclusion_type = null, $filter_name = null, $filter_waf_rules_modsec_rule_id = null, $page_number = null, $page_size = 20, $include = null)
    {
        return $this->listWafRuleExclusionsAsyncWithHttpInfo($firewall_id, $firewall_version_number, $filter_exclusion_type, $filter_name, $filter_waf_rules_modsec_rule_id, $page_number, $page_size, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listWafRuleExclusionsAsyncWithHttpInfo
     *
     * List WAF rule exclusions
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  string $filter_exclusion_type Filters the results based on this exclusion type. (optional)
     * @param  string $filter_name Filters the results based on name. (optional)
     * @param  int $filter_waf_rules_modsec_rule_id Filters the results based on this ModSecurity rule ID. (optional)
     * @param  int $page_number Current page. (optional)
     * @param  int $page_size Number of records per page. (optional, default to 20)
     * @param  string $include Include relationships. Optional, comma-separated values. Permitted values: &#x60;waf_rules&#x60; and &#x60;waf_rule_revisions&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listWafRuleExclusionsAsyncWithHttpInfo($firewall_id, $firewall_version_number, $filter_exclusion_type = null, $filter_name = null, $filter_waf_rules_modsec_rule_id = null, $page_number = null, $page_size = 20, $include = null)
    {
        $returnType = '';
        $request = $this->listWafRuleExclusionsRequest($firewall_id, $firewall_version_number, $filter_exclusion_type, $filter_name, $filter_waf_rules_modsec_rule_id, $page_number, $page_size, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listWafRuleExclusions'
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  string $filter_exclusion_type Filters the results based on this exclusion type. (optional)
     * @param  string $filter_name Filters the results based on name. (optional)
     * @param  int $filter_waf_rules_modsec_rule_id Filters the results based on this ModSecurity rule ID. (optional)
     * @param  int $page_number Current page. (optional)
     * @param  int $page_size Number of records per page. (optional, default to 20)
     * @param  string $include Include relationships. Optional, comma-separated values. Permitted values: &#x60;waf_rules&#x60; and &#x60;waf_rule_revisions&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listWafRuleExclusionsRequest($firewall_id, $firewall_version_number, $filter_exclusion_type = null, $filter_name = null, $filter_waf_rules_modsec_rule_id = null, $page_number = null, $page_size = 20, $include = null)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling listWafRuleExclusions'
            );
        }
        // verify the required parameter 'firewall_version_number' is set
        if ($firewall_version_number === null || (is_array($firewall_version_number) && count($firewall_version_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_version_number when calling listWafRuleExclusions'
            );
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling WafExclusionsApi.listWafRuleExclusions, must be bigger than or equal to 1.');
        }


        $resourcePath = '/waf/firewalls/{firewall_id}/versions/{firewall_version_number}/exclusions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter_exclusion_type !== null) {
            if('form' === 'form' && is_array($filter_exclusion_type)) {
                foreach($filter_exclusion_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[exclusion_type]'] = $filter_exclusion_type;
            }
        }
        // query params
        if ($filter_name !== null) {
            if('form' === 'form' && is_array($filter_name)) {
                foreach($filter_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[name]'] = $filter_name;
            }
        }
        // query params
        if ($filter_waf_rules_modsec_rule_id !== null) {
            if('form' === 'form' && is_array($filter_waf_rules_modsec_rule_id)) {
                foreach($filter_waf_rules_modsec_rule_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['filter[waf_rules.modsec_rule_id]'] = $filter_waf_rules_modsec_rule_id;
            }
        }
        // query params
        if (is_array($page_number)) {
            $page_number = ObjectSerializer::serializeCollection($page_number, 'simple', true);
        }
        if ($page_number !== null) {
            $queryParams['page[number]'] = $page_number;
        }
        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer::serializeCollection($page_size, 'simple', true);
        }
        if ($page_size !== null) {
            $queryParams['page[size]'] = $page_size;
        }
        // query params
        if ($include !== null) {
            if('form' === 'form' && is_array($include)) {
                foreach($include as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include'] = $include;
            }
        }


        // path params
        if ($firewall_id !== null) {
            $resourcePath = str_replace(
                '{' . 'firewall_id' . '}',
                ObjectSerializer::toPathValue($firewall_id),
                $resourcePath
            );
        }
        // path params
        if ($firewall_version_number !== null) {
            $resourcePath = str_replace(
                '{' . 'firewall_version_number' . '}',
                ObjectSerializer::toPathValue($firewall_version_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWafRuleExclusion
     *
     * Update a WAF rule exclusion
     *
     * @param  string $firewall_id firewall_id (required)
     * @param  int $firewall_version_number firewall_version_number (required)
     * @param  int $exclusion_number exclusion_number (required)
     * @param  \OpenAPI\Client\Model\InlineObject3 $inline_object3 inline_object3 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateWafRuleExclusion($firewall_id, $firewall_version_number, $exclusion_number, $inline_object3 = null)
    {
        $this->updateWafRuleExclusionWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number, $inline_object3);
    }

    /**
     * Operation updateWafRuleExclusionWithHttpInfo
     *
     * Update a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     * @param  \OpenAPI\Client\Model\InlineObject3 $inline_object3 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWafRuleExclusionWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number, $inline_object3 = null)
    {
        $request = $this->updateWafRuleExclusionRequest($firewall_id, $firewall_version_number, $exclusion_number, $inline_object3);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateWafRuleExclusionAsync
     *
     * Update a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     * @param  \OpenAPI\Client\Model\InlineObject3 $inline_object3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWafRuleExclusionAsync($firewall_id, $firewall_version_number, $exclusion_number, $inline_object3 = null)
    {
        return $this->updateWafRuleExclusionAsyncWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number, $inline_object3)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWafRuleExclusionAsyncWithHttpInfo
     *
     * Update a WAF rule exclusion
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     * @param  \OpenAPI\Client\Model\InlineObject3 $inline_object3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWafRuleExclusionAsyncWithHttpInfo($firewall_id, $firewall_version_number, $exclusion_number, $inline_object3 = null)
    {
        $returnType = '';
        $request = $this->updateWafRuleExclusionRequest($firewall_id, $firewall_version_number, $exclusion_number, $inline_object3);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWafRuleExclusion'
     *
     * @param  string $firewall_id (required)
     * @param  int $firewall_version_number (required)
     * @param  int $exclusion_number (required)
     * @param  \OpenAPI\Client\Model\InlineObject3 $inline_object3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateWafRuleExclusionRequest($firewall_id, $firewall_version_number, $exclusion_number, $inline_object3 = null)
    {
        // verify the required parameter 'firewall_id' is set
        if ($firewall_id === null || (is_array($firewall_id) && count($firewall_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_id when calling updateWafRuleExclusion'
            );
        }
        // verify the required parameter 'firewall_version_number' is set
        if ($firewall_version_number === null || (is_array($firewall_version_number) && count($firewall_version_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $firewall_version_number when calling updateWafRuleExclusion'
            );
        }
        // verify the required parameter 'exclusion_number' is set
        if ($exclusion_number === null || (is_array($exclusion_number) && count($exclusion_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $exclusion_number when calling updateWafRuleExclusion'
            );
        }

        $resourcePath = '/waf/firewalls/{firewall_id}/versions/{firewall_version_number}/exclusions/{exclusion_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($firewall_id !== null) {
            $resourcePath = str_replace(
                '{' . 'firewall_id' . '}',
                ObjectSerializer::toPathValue($firewall_id),
                $resourcePath
            );
        }
        // path params
        if ($firewall_version_number !== null) {
            $resourcePath = str_replace(
                '{' . 'firewall_version_number' . '}',
                ObjectSerializer::toPathValue($firewall_version_number),
                $resourcePath
            );
        }
        // path params
        if ($exclusion_number !== null) {
            $resourcePath = str_replace(
                '{' . 'exclusion_number' . '}',
                ObjectSerializer::toPathValue($exclusion_number),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.api+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.api+json'],
                ['application/vnd.api+json']
            );
        }

        // for model (json/xml)
        if (isset($inline_object3)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_object3));
            } else {
                $httpBody = $inline_object3;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Fastly-Key');
        if ($apiKey !== null) {
            $headers['Fastly-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
